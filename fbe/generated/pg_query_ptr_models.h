// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: pg_query.fbe
// Version: 1.7.0.0

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_custom_models.h"

#include "pg_query_ptr.h"

namespace FBE {

// Fast Binary Encoding ::pg_query::OverridingKind field model
template <>
class FieldModel<::pg_query::OverridingKind> : public FieldModelBase<::pg_query::OverridingKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::OverridingKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::QuerySource field model
template <>
class FieldModel<::pg_query::QuerySource> : public FieldModelBase<::pg_query::QuerySource, int32_t>
{
public:
    using FieldModelBase<::pg_query::QuerySource, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::SortByDir field model
template <>
class FieldModel<::pg_query::SortByDir> : public FieldModelBase<::pg_query::SortByDir, int32_t>
{
public:
    using FieldModelBase<::pg_query::SortByDir, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::SortByNulls field model
template <>
class FieldModel<::pg_query::SortByNulls> : public FieldModelBase<::pg_query::SortByNulls, int32_t>
{
public:
    using FieldModelBase<::pg_query::SortByNulls, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::A_Expr_Kind field model
template <>
class FieldModel<::pg_query::A_Expr_Kind> : public FieldModelBase<::pg_query::A_Expr_Kind, int32_t>
{
public:
    using FieldModelBase<::pg_query::A_Expr_Kind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::RoleSpecType field model
template <>
class FieldModel<::pg_query::RoleSpecType> : public FieldModelBase<::pg_query::RoleSpecType, int32_t>
{
public:
    using FieldModelBase<::pg_query::RoleSpecType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::TableLikeOption field model
template <>
class FieldModel<::pg_query::TableLikeOption> : public FieldModelBase<::pg_query::TableLikeOption, int32_t>
{
public:
    using FieldModelBase<::pg_query::TableLikeOption, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::DefElemAction field model
template <>
class FieldModel<::pg_query::DefElemAction> : public FieldModelBase<::pg_query::DefElemAction, int32_t>
{
public:
    using FieldModelBase<::pg_query::DefElemAction, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::PartitionRangeDatumKind field model
template <>
class FieldModel<::pg_query::PartitionRangeDatumKind> : public FieldModelBase<::pg_query::PartitionRangeDatumKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::PartitionRangeDatumKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::RTEKind field model
template <>
class FieldModel<::pg_query::RTEKind> : public FieldModelBase<::pg_query::RTEKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::RTEKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::WCOKind field model
template <>
class FieldModel<::pg_query::WCOKind> : public FieldModelBase<::pg_query::WCOKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::WCOKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::GroupingSetKind field model
template <>
class FieldModel<::pg_query::GroupingSetKind> : public FieldModelBase<::pg_query::GroupingSetKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::GroupingSetKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::CTEMaterialize field model
template <>
class FieldModel<::pg_query::CTEMaterialize> : public FieldModelBase<::pg_query::CTEMaterialize, int32_t>
{
public:
    using FieldModelBase<::pg_query::CTEMaterialize, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::SetOperation field model
template <>
class FieldModel<::pg_query::SetOperation> : public FieldModelBase<::pg_query::SetOperation, int32_t>
{
public:
    using FieldModelBase<::pg_query::SetOperation, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::ObjectType field model
template <>
class FieldModel<::pg_query::ObjectType> : public FieldModelBase<::pg_query::ObjectType, int32_t>
{
public:
    using FieldModelBase<::pg_query::ObjectType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::DropBehavior field model
template <>
class FieldModel<::pg_query::DropBehavior> : public FieldModelBase<::pg_query::DropBehavior, int32_t>
{
public:
    using FieldModelBase<::pg_query::DropBehavior, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::AlterTableType field model
template <>
class FieldModel<::pg_query::AlterTableType> : public FieldModelBase<::pg_query::AlterTableType, int32_t>
{
public:
    using FieldModelBase<::pg_query::AlterTableType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::GrantTargetType field model
template <>
class FieldModel<::pg_query::GrantTargetType> : public FieldModelBase<::pg_query::GrantTargetType, int32_t>
{
public:
    using FieldModelBase<::pg_query::GrantTargetType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::VariableSetKind field model
template <>
class FieldModel<::pg_query::VariableSetKind> : public FieldModelBase<::pg_query::VariableSetKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::VariableSetKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::ConstrType field model
template <>
class FieldModel<::pg_query::ConstrType> : public FieldModelBase<::pg_query::ConstrType, int32_t>
{
public:
    using FieldModelBase<::pg_query::ConstrType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::ImportForeignSchemaType field model
template <>
class FieldModel<::pg_query::ImportForeignSchemaType> : public FieldModelBase<::pg_query::ImportForeignSchemaType, int32_t>
{
public:
    using FieldModelBase<::pg_query::ImportForeignSchemaType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::RoleStmtType field model
template <>
class FieldModel<::pg_query::RoleStmtType> : public FieldModelBase<::pg_query::RoleStmtType, int32_t>
{
public:
    using FieldModelBase<::pg_query::RoleStmtType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::FetchDirection field model
template <>
class FieldModel<::pg_query::FetchDirection> : public FieldModelBase<::pg_query::FetchDirection, int32_t>
{
public:
    using FieldModelBase<::pg_query::FetchDirection, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::FunctionParameterMode field model
template <>
class FieldModel<::pg_query::FunctionParameterMode> : public FieldModelBase<::pg_query::FunctionParameterMode, int32_t>
{
public:
    using FieldModelBase<::pg_query::FunctionParameterMode, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::TransactionStmtKind field model
template <>
class FieldModel<::pg_query::TransactionStmtKind> : public FieldModelBase<::pg_query::TransactionStmtKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::TransactionStmtKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::ViewCheckOption field model
template <>
class FieldModel<::pg_query::ViewCheckOption> : public FieldModelBase<::pg_query::ViewCheckOption, int32_t>
{
public:
    using FieldModelBase<::pg_query::ViewCheckOption, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::ClusterOption field model
template <>
class FieldModel<::pg_query::ClusterOption> : public FieldModelBase<::pg_query::ClusterOption, int32_t>
{
public:
    using FieldModelBase<::pg_query::ClusterOption, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::DiscardMode field model
template <>
class FieldModel<::pg_query::DiscardMode> : public FieldModelBase<::pg_query::DiscardMode, int32_t>
{
public:
    using FieldModelBase<::pg_query::DiscardMode, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::ReindexObjectType field model
template <>
class FieldModel<::pg_query::ReindexObjectType> : public FieldModelBase<::pg_query::ReindexObjectType, int32_t>
{
public:
    using FieldModelBase<::pg_query::ReindexObjectType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::AlterTSConfigType field model
template <>
class FieldModel<::pg_query::AlterTSConfigType> : public FieldModelBase<::pg_query::AlterTSConfigType, int32_t>
{
public:
    using FieldModelBase<::pg_query::AlterTSConfigType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::AlterSubscriptionType field model
template <>
class FieldModel<::pg_query::AlterSubscriptionType> : public FieldModelBase<::pg_query::AlterSubscriptionType, int32_t>
{
public:
    using FieldModelBase<::pg_query::AlterSubscriptionType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::OnCommitAction field model
template <>
class FieldModel<::pg_query::OnCommitAction> : public FieldModelBase<::pg_query::OnCommitAction, int32_t>
{
public:
    using FieldModelBase<::pg_query::OnCommitAction, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::ParamKind field model
template <>
class FieldModel<::pg_query::ParamKind> : public FieldModelBase<::pg_query::ParamKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::ParamKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::CoercionContext field model
template <>
class FieldModel<::pg_query::CoercionContext> : public FieldModelBase<::pg_query::CoercionContext, int32_t>
{
public:
    using FieldModelBase<::pg_query::CoercionContext, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::CoercionForm field model
template <>
class FieldModel<::pg_query::CoercionForm> : public FieldModelBase<::pg_query::CoercionForm, int32_t>
{
public:
    using FieldModelBase<::pg_query::CoercionForm, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::BoolExprType field model
template <>
class FieldModel<::pg_query::BoolExprType> : public FieldModelBase<::pg_query::BoolExprType, int32_t>
{
public:
    using FieldModelBase<::pg_query::BoolExprType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::SubLinkType field model
template <>
class FieldModel<::pg_query::SubLinkType> : public FieldModelBase<::pg_query::SubLinkType, int32_t>
{
public:
    using FieldModelBase<::pg_query::SubLinkType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::RowCompareType field model
template <>
class FieldModel<::pg_query::RowCompareType> : public FieldModelBase<::pg_query::RowCompareType, int32_t>
{
public:
    using FieldModelBase<::pg_query::RowCompareType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::MinMaxOp field model
template <>
class FieldModel<::pg_query::MinMaxOp> : public FieldModelBase<::pg_query::MinMaxOp, int32_t>
{
public:
    using FieldModelBase<::pg_query::MinMaxOp, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::SQLValueFunctionOp field model
template <>
class FieldModel<::pg_query::SQLValueFunctionOp> : public FieldModelBase<::pg_query::SQLValueFunctionOp, int32_t>
{
public:
    using FieldModelBase<::pg_query::SQLValueFunctionOp, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::XmlExprOp field model
template <>
class FieldModel<::pg_query::XmlExprOp> : public FieldModelBase<::pg_query::XmlExprOp, int32_t>
{
public:
    using FieldModelBase<::pg_query::XmlExprOp, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::XmlOptionType field model
template <>
class FieldModel<::pg_query::XmlOptionType> : public FieldModelBase<::pg_query::XmlOptionType, int32_t>
{
public:
    using FieldModelBase<::pg_query::XmlOptionType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::NullTestType field model
template <>
class FieldModel<::pg_query::NullTestType> : public FieldModelBase<::pg_query::NullTestType, int32_t>
{
public:
    using FieldModelBase<::pg_query::NullTestType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::BoolTestType field model
template <>
class FieldModel<::pg_query::BoolTestType> : public FieldModelBase<::pg_query::BoolTestType, int32_t>
{
public:
    using FieldModelBase<::pg_query::BoolTestType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::CmdType field model
template <>
class FieldModel<::pg_query::CmdType> : public FieldModelBase<::pg_query::CmdType, int32_t>
{
public:
    using FieldModelBase<::pg_query::CmdType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::JoinType field model
template <>
class FieldModel<::pg_query::JoinType> : public FieldModelBase<::pg_query::JoinType, int32_t>
{
public:
    using FieldModelBase<::pg_query::JoinType, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::AggStrategy field model
template <>
class FieldModel<::pg_query::AggStrategy> : public FieldModelBase<::pg_query::AggStrategy, int32_t>
{
public:
    using FieldModelBase<::pg_query::AggStrategy, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::AggSplit field model
template <>
class FieldModel<::pg_query::AggSplit> : public FieldModelBase<::pg_query::AggSplit, int32_t>
{
public:
    using FieldModelBase<::pg_query::AggSplit, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::SetOpCmd field model
template <>
class FieldModel<::pg_query::SetOpCmd> : public FieldModelBase<::pg_query::SetOpCmd, int32_t>
{
public:
    using FieldModelBase<::pg_query::SetOpCmd, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::SetOpStrategy field model
template <>
class FieldModel<::pg_query::SetOpStrategy> : public FieldModelBase<::pg_query::SetOpStrategy, int32_t>
{
public:
    using FieldModelBase<::pg_query::SetOpStrategy, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::OnConflictAction field model
template <>
class FieldModel<::pg_query::OnConflictAction> : public FieldModelBase<::pg_query::OnConflictAction, int32_t>
{
public:
    using FieldModelBase<::pg_query::OnConflictAction, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::LimitOption field model
template <>
class FieldModel<::pg_query::LimitOption> : public FieldModelBase<::pg_query::LimitOption, int32_t>
{
public:
    using FieldModelBase<::pg_query::LimitOption, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::LockClauseStrength field model
template <>
class FieldModel<::pg_query::LockClauseStrength> : public FieldModelBase<::pg_query::LockClauseStrength, int32_t>
{
public:
    using FieldModelBase<::pg_query::LockClauseStrength, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::LockWaitPolicy field model
template <>
class FieldModel<::pg_query::LockWaitPolicy> : public FieldModelBase<::pg_query::LockWaitPolicy, int32_t>
{
public:
    using FieldModelBase<::pg_query::LockWaitPolicy, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::LockTupleMode field model
template <>
class FieldModel<::pg_query::LockTupleMode> : public FieldModelBase<::pg_query::LockTupleMode, int32_t>
{
public:
    using FieldModelBase<::pg_query::LockTupleMode, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::KeywordKind field model
template <>
class FieldModel<::pg_query::KeywordKind> : public FieldModelBase<::pg_query::KeywordKind, int32_t>
{
public:
    using FieldModelBase<::pg_query::KeywordKind, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::pg_query::Token field model
template <>
class FieldModel<::pg_query::Token> : public FieldModelBase<::pg_query::Token, int32_t>
{
public:
    using FieldModelBase<::pg_query::Token, int32_t>::FieldModelBase;
};

template <>
class FieldModel<::pg_query::Node>
{
public:
    FieldModel(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept;

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the variant value is valid
    bool verify() const noexcept;

    // Get the variant value
    void get(::pg_query::Node& fbe_value) const noexcept;

    // Set the variant value (begin phase)
    size_t set_begin(size_t variant_type_fbe_size, size_t variant_type_index);
    // Set the variant value (end phase)
    void set_end(size_t fbe_begin);

    // Set the variant value
    void set(const ::pg_query::Node& fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;
};

class FieldModelPtr_pg_query_Integer
{
public:
    FieldModelPtr_pg_query_Integer(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Integer();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 1; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Integer** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Integer& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Integer* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Integer* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Float
{
public:
    FieldModelPtr_pg_query_Float(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Float();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 2; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Float** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Float& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Float* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Float* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_String
{
public:
    FieldModelPtr_pg_query_String(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_String();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 3; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::String** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::String& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::String* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::String* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_BitString
{
public:
    FieldModelPtr_pg_query_BitString(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_BitString();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 4; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::BitString** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::BitString& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::BitString* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::BitString* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Null
{
public:
    FieldModelPtr_pg_query_Null(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Null();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 5; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Null** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Null& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Null* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Null* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_List
{
public:
    FieldModelPtr_pg_query_List(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_List();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 6; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::List** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::List& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::List* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::List* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_OidList
{
public:
    FieldModelPtr_pg_query_OidList(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_OidList();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 7; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::OidList** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::OidList& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::OidList* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::OidList* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_IntList
{
public:
    FieldModelPtr_pg_query_IntList(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_IntList();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 8; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::IntList** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::IntList& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::IntList* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::IntList* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Alias
{
public:
    FieldModelPtr_pg_query_Alias(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Alias();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 9; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Alias** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Alias& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Alias* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Alias* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeVar
{
public:
    FieldModelPtr_pg_query_RangeVar(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeVar();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 10; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeVar** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeVar& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeVar* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeVar* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TableFunc
{
public:
    FieldModelPtr_pg_query_TableFunc(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TableFunc();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 11; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TableFunc** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TableFunc& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TableFunc* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TableFunc* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Expr
{
public:
    FieldModelPtr_pg_query_Expr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Expr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 12; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Expr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Expr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Expr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Expr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Var
{
public:
    FieldModelPtr_pg_query_Var(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Var();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 13; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Var** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Var& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Var* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Var* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Param
{
public:
    FieldModelPtr_pg_query_Param(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Param();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 14; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Param** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Param& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Param* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Param* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Aggref
{
public:
    FieldModelPtr_pg_query_Aggref(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Aggref();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 15; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Aggref** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Aggref& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Aggref* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Aggref* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_GroupingFunc
{
public:
    FieldModelPtr_pg_query_GroupingFunc(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_GroupingFunc();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 16; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::GroupingFunc** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::GroupingFunc& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::GroupingFunc* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::GroupingFunc* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_WindowFunc
{
public:
    FieldModelPtr_pg_query_WindowFunc(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_WindowFunc();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 17; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::WindowFunc** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::WindowFunc& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::WindowFunc* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::WindowFunc* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SubscriptingRef
{
public:
    FieldModelPtr_pg_query_SubscriptingRef(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SubscriptingRef();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 18; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SubscriptingRef** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SubscriptingRef& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SubscriptingRef* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SubscriptingRef* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_FuncExpr
{
public:
    FieldModelPtr_pg_query_FuncExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_FuncExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 19; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::FuncExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::FuncExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::FuncExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::FuncExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_NamedArgExpr
{
public:
    FieldModelPtr_pg_query_NamedArgExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_NamedArgExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 20; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::NamedArgExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::NamedArgExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::NamedArgExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::NamedArgExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_OpExpr
{
public:
    FieldModelPtr_pg_query_OpExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_OpExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 21; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::OpExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::OpExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::OpExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::OpExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DistinctExpr
{
public:
    FieldModelPtr_pg_query_DistinctExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DistinctExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 22; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DistinctExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DistinctExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DistinctExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DistinctExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_NullIfExpr
{
public:
    FieldModelPtr_pg_query_NullIfExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_NullIfExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 23; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::NullIfExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::NullIfExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::NullIfExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::NullIfExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ScalarArrayOpExpr
{
public:
    FieldModelPtr_pg_query_ScalarArrayOpExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ScalarArrayOpExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 24; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ScalarArrayOpExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ScalarArrayOpExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ScalarArrayOpExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ScalarArrayOpExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_BoolExpr
{
public:
    FieldModelPtr_pg_query_BoolExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_BoolExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 25; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::BoolExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::BoolExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::BoolExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::BoolExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SubLink
{
public:
    FieldModelPtr_pg_query_SubLink(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SubLink();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 26; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SubLink** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SubLink& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SubLink* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SubLink* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SubPlan
{
public:
    FieldModelPtr_pg_query_SubPlan(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SubPlan();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 27; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SubPlan** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SubPlan& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SubPlan* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SubPlan* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlternativeSubPlan
{
public:
    FieldModelPtr_pg_query_AlternativeSubPlan(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlternativeSubPlan();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 28; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlternativeSubPlan** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlternativeSubPlan& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlternativeSubPlan* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlternativeSubPlan* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_FieldSelect
{
public:
    FieldModelPtr_pg_query_FieldSelect(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_FieldSelect();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 29; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::FieldSelect** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::FieldSelect& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::FieldSelect* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::FieldSelect* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_FieldStore
{
public:
    FieldModelPtr_pg_query_FieldStore(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_FieldStore();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 30; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::FieldStore** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::FieldStore& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::FieldStore* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::FieldStore* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RelabelType
{
public:
    FieldModelPtr_pg_query_RelabelType(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RelabelType();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 31; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RelabelType** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RelabelType& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RelabelType* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RelabelType* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CoerceViaIO
{
public:
    FieldModelPtr_pg_query_CoerceViaIO(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CoerceViaIO();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 32; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CoerceViaIO** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CoerceViaIO& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CoerceViaIO* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CoerceViaIO* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ArrayCoerceExpr
{
public:
    FieldModelPtr_pg_query_ArrayCoerceExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ArrayCoerceExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 33; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ArrayCoerceExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ArrayCoerceExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ArrayCoerceExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ArrayCoerceExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ConvertRowtypeExpr
{
public:
    FieldModelPtr_pg_query_ConvertRowtypeExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ConvertRowtypeExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 34; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ConvertRowtypeExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ConvertRowtypeExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ConvertRowtypeExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ConvertRowtypeExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CollateExpr
{
public:
    FieldModelPtr_pg_query_CollateExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CollateExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 35; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CollateExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CollateExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CollateExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CollateExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CaseExpr
{
public:
    FieldModelPtr_pg_query_CaseExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CaseExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 36; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CaseExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CaseExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CaseExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CaseExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CaseWhen
{
public:
    FieldModelPtr_pg_query_CaseWhen(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CaseWhen();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 37; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CaseWhen** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CaseWhen& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CaseWhen* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CaseWhen* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CaseTestExpr
{
public:
    FieldModelPtr_pg_query_CaseTestExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CaseTestExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 38; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CaseTestExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CaseTestExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CaseTestExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CaseTestExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ArrayExpr
{
public:
    FieldModelPtr_pg_query_ArrayExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ArrayExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 39; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ArrayExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ArrayExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ArrayExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ArrayExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RowExpr
{
public:
    FieldModelPtr_pg_query_RowExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RowExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 40; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RowExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RowExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RowExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RowExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RowCompareExpr
{
public:
    FieldModelPtr_pg_query_RowCompareExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RowCompareExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 41; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RowCompareExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RowCompareExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RowCompareExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RowCompareExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CoalesceExpr
{
public:
    FieldModelPtr_pg_query_CoalesceExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CoalesceExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 42; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CoalesceExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CoalesceExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CoalesceExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CoalesceExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_MinMaxExpr
{
public:
    FieldModelPtr_pg_query_MinMaxExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_MinMaxExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 43; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::MinMaxExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::MinMaxExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::MinMaxExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::MinMaxExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SQLValueFunction
{
public:
    FieldModelPtr_pg_query_SQLValueFunction(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SQLValueFunction();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 44; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SQLValueFunction** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SQLValueFunction& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SQLValueFunction* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SQLValueFunction* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_XmlExpr
{
public:
    FieldModelPtr_pg_query_XmlExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_XmlExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 45; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::XmlExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::XmlExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::XmlExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::XmlExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_NullTest
{
public:
    FieldModelPtr_pg_query_NullTest(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_NullTest();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 46; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::NullTest** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::NullTest& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::NullTest* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::NullTest* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_BooleanTest
{
public:
    FieldModelPtr_pg_query_BooleanTest(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_BooleanTest();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 47; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::BooleanTest** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::BooleanTest& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::BooleanTest* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::BooleanTest* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CoerceToDomain
{
public:
    FieldModelPtr_pg_query_CoerceToDomain(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CoerceToDomain();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 48; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CoerceToDomain** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CoerceToDomain& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CoerceToDomain* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CoerceToDomain* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CoerceToDomainValue
{
public:
    FieldModelPtr_pg_query_CoerceToDomainValue(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CoerceToDomainValue();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 49; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CoerceToDomainValue** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CoerceToDomainValue& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CoerceToDomainValue* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CoerceToDomainValue* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SetToDefault
{
public:
    FieldModelPtr_pg_query_SetToDefault(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SetToDefault();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 50; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SetToDefault** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SetToDefault& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SetToDefault* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SetToDefault* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CurrentOfExpr
{
public:
    FieldModelPtr_pg_query_CurrentOfExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CurrentOfExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 51; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CurrentOfExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CurrentOfExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CurrentOfExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CurrentOfExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_NextValueExpr
{
public:
    FieldModelPtr_pg_query_NextValueExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_NextValueExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 52; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::NextValueExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::NextValueExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::NextValueExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::NextValueExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_InferenceElem
{
public:
    FieldModelPtr_pg_query_InferenceElem(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_InferenceElem();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 53; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::InferenceElem** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::InferenceElem& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::InferenceElem* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::InferenceElem* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TargetEntry
{
public:
    FieldModelPtr_pg_query_TargetEntry(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TargetEntry();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 54; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TargetEntry** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TargetEntry& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TargetEntry* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TargetEntry* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeTblRef
{
public:
    FieldModelPtr_pg_query_RangeTblRef(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeTblRef();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 55; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeTblRef** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeTblRef& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeTblRef* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeTblRef* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_JoinExpr
{
public:
    FieldModelPtr_pg_query_JoinExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_JoinExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 56; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::JoinExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::JoinExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::JoinExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::JoinExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_FromExpr
{
public:
    FieldModelPtr_pg_query_FromExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_FromExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 57; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::FromExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::FromExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::FromExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::FromExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_OnConflictExpr
{
public:
    FieldModelPtr_pg_query_OnConflictExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_OnConflictExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 58; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::OnConflictExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::OnConflictExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::OnConflictExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::OnConflictExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_IntoClause
{
public:
    FieldModelPtr_pg_query_IntoClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_IntoClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 59; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::IntoClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::IntoClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::IntoClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::IntoClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RawStmt
{
public:
    FieldModelPtr_pg_query_RawStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RawStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 60; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RawStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RawStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RawStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RawStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Query
{
public:
    FieldModelPtr_pg_query_Query(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Query();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 61; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Query** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Query& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Query* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Query* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_InsertStmt
{
public:
    FieldModelPtr_pg_query_InsertStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_InsertStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 62; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::InsertStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::InsertStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::InsertStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::InsertStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DeleteStmt
{
public:
    FieldModelPtr_pg_query_DeleteStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DeleteStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 63; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DeleteStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DeleteStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DeleteStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DeleteStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_UpdateStmt
{
public:
    FieldModelPtr_pg_query_UpdateStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_UpdateStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 64; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::UpdateStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::UpdateStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::UpdateStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::UpdateStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SelectStmt
{
public:
    FieldModelPtr_pg_query_SelectStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SelectStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 65; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SelectStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SelectStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SelectStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SelectStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterTableStmt
{
public:
    FieldModelPtr_pg_query_AlterTableStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterTableStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 66; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterTableStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterTableStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterTableStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterTableStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterTableCmd
{
public:
    FieldModelPtr_pg_query_AlterTableCmd(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterTableCmd();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 67; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterTableCmd** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterTableCmd& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterTableCmd* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterTableCmd* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterDomainStmt
{
public:
    FieldModelPtr_pg_query_AlterDomainStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterDomainStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 68; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterDomainStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterDomainStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterDomainStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterDomainStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SetOperationStmt
{
public:
    FieldModelPtr_pg_query_SetOperationStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SetOperationStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 69; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SetOperationStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SetOperationStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SetOperationStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SetOperationStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_GrantStmt
{
public:
    FieldModelPtr_pg_query_GrantStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_GrantStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 70; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::GrantStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::GrantStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::GrantStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::GrantStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_GrantRoleStmt
{
public:
    FieldModelPtr_pg_query_GrantRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_GrantRoleStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 71; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::GrantRoleStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::GrantRoleStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::GrantRoleStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::GrantRoleStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterDefaultPrivilegesStmt
{
public:
    FieldModelPtr_pg_query_AlterDefaultPrivilegesStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterDefaultPrivilegesStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 72; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterDefaultPrivilegesStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterDefaultPrivilegesStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterDefaultPrivilegesStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterDefaultPrivilegesStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ClosePortalStmt
{
public:
    FieldModelPtr_pg_query_ClosePortalStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ClosePortalStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 73; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ClosePortalStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ClosePortalStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ClosePortalStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ClosePortalStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ClusterStmt
{
public:
    FieldModelPtr_pg_query_ClusterStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ClusterStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 74; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ClusterStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ClusterStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ClusterStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ClusterStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CopyStmt
{
public:
    FieldModelPtr_pg_query_CopyStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CopyStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 75; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CopyStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CopyStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CopyStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CopyStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateStmt
{
public:
    FieldModelPtr_pg_query_CreateStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 76; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DefineStmt
{
public:
    FieldModelPtr_pg_query_DefineStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DefineStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 77; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DefineStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DefineStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DefineStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DefineStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DropStmt
{
public:
    FieldModelPtr_pg_query_DropStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DropStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 78; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DropStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DropStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DropStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DropStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TruncateStmt
{
public:
    FieldModelPtr_pg_query_TruncateStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TruncateStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 79; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TruncateStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TruncateStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TruncateStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TruncateStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CommentStmt
{
public:
    FieldModelPtr_pg_query_CommentStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CommentStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 80; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CommentStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CommentStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CommentStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CommentStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_FetchStmt
{
public:
    FieldModelPtr_pg_query_FetchStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_FetchStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 81; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::FetchStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::FetchStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::FetchStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::FetchStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_IndexStmt
{
public:
    FieldModelPtr_pg_query_IndexStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_IndexStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 82; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::IndexStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::IndexStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::IndexStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::IndexStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateFunctionStmt
{
public:
    FieldModelPtr_pg_query_CreateFunctionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateFunctionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 83; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateFunctionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateFunctionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateFunctionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateFunctionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterFunctionStmt
{
public:
    FieldModelPtr_pg_query_AlterFunctionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterFunctionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 84; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterFunctionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterFunctionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterFunctionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterFunctionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DoStmt
{
public:
    FieldModelPtr_pg_query_DoStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DoStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 85; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DoStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DoStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DoStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DoStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RenameStmt
{
public:
    FieldModelPtr_pg_query_RenameStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RenameStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 86; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RenameStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RenameStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RenameStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RenameStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RuleStmt
{
public:
    FieldModelPtr_pg_query_RuleStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RuleStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 87; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RuleStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RuleStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RuleStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RuleStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_NotifyStmt
{
public:
    FieldModelPtr_pg_query_NotifyStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_NotifyStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 88; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::NotifyStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::NotifyStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::NotifyStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::NotifyStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ListenStmt
{
public:
    FieldModelPtr_pg_query_ListenStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ListenStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 89; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ListenStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ListenStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ListenStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ListenStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_UnlistenStmt
{
public:
    FieldModelPtr_pg_query_UnlistenStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_UnlistenStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 90; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::UnlistenStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::UnlistenStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::UnlistenStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::UnlistenStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TransactionStmt
{
public:
    FieldModelPtr_pg_query_TransactionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TransactionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 91; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TransactionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TransactionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TransactionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TransactionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ViewStmt
{
public:
    FieldModelPtr_pg_query_ViewStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ViewStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 92; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ViewStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ViewStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ViewStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ViewStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_LoadStmt
{
public:
    FieldModelPtr_pg_query_LoadStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_LoadStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 93; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::LoadStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::LoadStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::LoadStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::LoadStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateDomainStmt
{
public:
    FieldModelPtr_pg_query_CreateDomainStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateDomainStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 94; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateDomainStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateDomainStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateDomainStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateDomainStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreatedbStmt
{
public:
    FieldModelPtr_pg_query_CreatedbStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreatedbStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 95; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreatedbStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreatedbStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreatedbStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreatedbStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DropdbStmt
{
public:
    FieldModelPtr_pg_query_DropdbStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DropdbStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 96; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DropdbStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DropdbStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DropdbStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DropdbStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_VacuumStmt
{
public:
    FieldModelPtr_pg_query_VacuumStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_VacuumStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 97; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::VacuumStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::VacuumStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::VacuumStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::VacuumStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ExplainStmt
{
public:
    FieldModelPtr_pg_query_ExplainStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ExplainStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 98; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ExplainStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ExplainStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ExplainStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ExplainStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateTableAsStmt
{
public:
    FieldModelPtr_pg_query_CreateTableAsStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateTableAsStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 99; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateTableAsStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateTableAsStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateTableAsStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateTableAsStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateSeqStmt
{
public:
    FieldModelPtr_pg_query_CreateSeqStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateSeqStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 100; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateSeqStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateSeqStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateSeqStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateSeqStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterSeqStmt
{
public:
    FieldModelPtr_pg_query_AlterSeqStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterSeqStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 101; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterSeqStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterSeqStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterSeqStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterSeqStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_VariableSetStmt
{
public:
    FieldModelPtr_pg_query_VariableSetStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_VariableSetStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 102; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::VariableSetStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::VariableSetStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::VariableSetStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::VariableSetStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_VariableShowStmt
{
public:
    FieldModelPtr_pg_query_VariableShowStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_VariableShowStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 103; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::VariableShowStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::VariableShowStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::VariableShowStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::VariableShowStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DiscardStmt
{
public:
    FieldModelPtr_pg_query_DiscardStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DiscardStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 104; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DiscardStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DiscardStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DiscardStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DiscardStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateTrigStmt
{
public:
    FieldModelPtr_pg_query_CreateTrigStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateTrigStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 105; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateTrigStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateTrigStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateTrigStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateTrigStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreatePLangStmt
{
public:
    FieldModelPtr_pg_query_CreatePLangStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreatePLangStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 106; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreatePLangStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreatePLangStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreatePLangStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreatePLangStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateRoleStmt
{
public:
    FieldModelPtr_pg_query_CreateRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateRoleStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 107; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateRoleStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateRoleStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateRoleStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateRoleStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterRoleStmt
{
public:
    FieldModelPtr_pg_query_AlterRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterRoleStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 108; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterRoleStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterRoleStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterRoleStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterRoleStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DropRoleStmt
{
public:
    FieldModelPtr_pg_query_DropRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DropRoleStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 109; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DropRoleStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DropRoleStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DropRoleStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DropRoleStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_LockStmt
{
public:
    FieldModelPtr_pg_query_LockStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_LockStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 110; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::LockStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::LockStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::LockStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::LockStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ConstraintsSetStmt
{
public:
    FieldModelPtr_pg_query_ConstraintsSetStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ConstraintsSetStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 111; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ConstraintsSetStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ConstraintsSetStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ConstraintsSetStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ConstraintsSetStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ReindexStmt
{
public:
    FieldModelPtr_pg_query_ReindexStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ReindexStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 112; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ReindexStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ReindexStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ReindexStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ReindexStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CheckPointStmt
{
public:
    FieldModelPtr_pg_query_CheckPointStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CheckPointStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 113; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CheckPointStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CheckPointStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CheckPointStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CheckPointStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateSchemaStmt
{
public:
    FieldModelPtr_pg_query_CreateSchemaStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateSchemaStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 114; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateSchemaStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateSchemaStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateSchemaStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateSchemaStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterDatabaseStmt
{
public:
    FieldModelPtr_pg_query_AlterDatabaseStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterDatabaseStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 115; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterDatabaseStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterDatabaseStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterDatabaseStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterDatabaseStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterDatabaseSetStmt
{
public:
    FieldModelPtr_pg_query_AlterDatabaseSetStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterDatabaseSetStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 116; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterDatabaseSetStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterDatabaseSetStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterDatabaseSetStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterDatabaseSetStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterRoleSetStmt
{
public:
    FieldModelPtr_pg_query_AlterRoleSetStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterRoleSetStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 117; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterRoleSetStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterRoleSetStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterRoleSetStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterRoleSetStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateConversionStmt
{
public:
    FieldModelPtr_pg_query_CreateConversionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateConversionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 118; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateConversionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateConversionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateConversionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateConversionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateCastStmt
{
public:
    FieldModelPtr_pg_query_CreateCastStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateCastStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 119; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateCastStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateCastStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateCastStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateCastStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateOpClassStmt
{
public:
    FieldModelPtr_pg_query_CreateOpClassStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateOpClassStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 120; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateOpClassStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateOpClassStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateOpClassStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateOpClassStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateOpFamilyStmt
{
public:
    FieldModelPtr_pg_query_CreateOpFamilyStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateOpFamilyStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 121; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateOpFamilyStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateOpFamilyStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateOpFamilyStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateOpFamilyStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterOpFamilyStmt
{
public:
    FieldModelPtr_pg_query_AlterOpFamilyStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterOpFamilyStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 122; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterOpFamilyStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterOpFamilyStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterOpFamilyStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterOpFamilyStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_PrepareStmt
{
public:
    FieldModelPtr_pg_query_PrepareStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_PrepareStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 123; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::PrepareStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::PrepareStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::PrepareStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::PrepareStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ExecuteStmt
{
public:
    FieldModelPtr_pg_query_ExecuteStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ExecuteStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 124; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ExecuteStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ExecuteStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ExecuteStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ExecuteStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DeallocateStmt
{
public:
    FieldModelPtr_pg_query_DeallocateStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DeallocateStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 125; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DeallocateStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DeallocateStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DeallocateStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DeallocateStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DeclareCursorStmt
{
public:
    FieldModelPtr_pg_query_DeclareCursorStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DeclareCursorStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 126; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DeclareCursorStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DeclareCursorStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DeclareCursorStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DeclareCursorStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateTableSpaceStmt
{
public:
    FieldModelPtr_pg_query_CreateTableSpaceStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateTableSpaceStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 127; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateTableSpaceStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateTableSpaceStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateTableSpaceStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateTableSpaceStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DropTableSpaceStmt
{
public:
    FieldModelPtr_pg_query_DropTableSpaceStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DropTableSpaceStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 128; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DropTableSpaceStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DropTableSpaceStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DropTableSpaceStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DropTableSpaceStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterObjectDependsStmt
{
public:
    FieldModelPtr_pg_query_AlterObjectDependsStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterObjectDependsStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 129; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterObjectDependsStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterObjectDependsStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterObjectDependsStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterObjectDependsStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterObjectSchemaStmt
{
public:
    FieldModelPtr_pg_query_AlterObjectSchemaStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterObjectSchemaStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 130; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterObjectSchemaStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterObjectSchemaStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterObjectSchemaStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterObjectSchemaStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterOwnerStmt
{
public:
    FieldModelPtr_pg_query_AlterOwnerStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterOwnerStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 131; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterOwnerStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterOwnerStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterOwnerStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterOwnerStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterOperatorStmt
{
public:
    FieldModelPtr_pg_query_AlterOperatorStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterOperatorStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 132; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterOperatorStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterOperatorStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterOperatorStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterOperatorStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterTypeStmt
{
public:
    FieldModelPtr_pg_query_AlterTypeStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterTypeStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 133; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterTypeStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterTypeStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterTypeStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterTypeStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DropOwnedStmt
{
public:
    FieldModelPtr_pg_query_DropOwnedStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DropOwnedStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 134; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DropOwnedStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DropOwnedStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DropOwnedStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DropOwnedStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ReassignOwnedStmt
{
public:
    FieldModelPtr_pg_query_ReassignOwnedStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ReassignOwnedStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 135; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ReassignOwnedStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ReassignOwnedStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ReassignOwnedStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ReassignOwnedStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CompositeTypeStmt
{
public:
    FieldModelPtr_pg_query_CompositeTypeStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CompositeTypeStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 136; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CompositeTypeStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CompositeTypeStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CompositeTypeStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CompositeTypeStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateEnumStmt
{
public:
    FieldModelPtr_pg_query_CreateEnumStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateEnumStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 137; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateEnumStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateEnumStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateEnumStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateEnumStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateRangeStmt
{
public:
    FieldModelPtr_pg_query_CreateRangeStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateRangeStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 138; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateRangeStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateRangeStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateRangeStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateRangeStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterEnumStmt
{
public:
    FieldModelPtr_pg_query_AlterEnumStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterEnumStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 139; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterEnumStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterEnumStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterEnumStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterEnumStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterTSDictionaryStmt
{
public:
    FieldModelPtr_pg_query_AlterTSDictionaryStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterTSDictionaryStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 140; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterTSDictionaryStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterTSDictionaryStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterTSDictionaryStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterTSDictionaryStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterTSConfigurationStmt
{
public:
    FieldModelPtr_pg_query_AlterTSConfigurationStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterTSConfigurationStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 141; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterTSConfigurationStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterTSConfigurationStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterTSConfigurationStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterTSConfigurationStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateFdwStmt
{
public:
    FieldModelPtr_pg_query_CreateFdwStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateFdwStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 142; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateFdwStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateFdwStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateFdwStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateFdwStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterFdwStmt
{
public:
    FieldModelPtr_pg_query_AlterFdwStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterFdwStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 143; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterFdwStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterFdwStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterFdwStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterFdwStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateForeignServerStmt
{
public:
    FieldModelPtr_pg_query_CreateForeignServerStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateForeignServerStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 144; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateForeignServerStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateForeignServerStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateForeignServerStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateForeignServerStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterForeignServerStmt
{
public:
    FieldModelPtr_pg_query_AlterForeignServerStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterForeignServerStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 145; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterForeignServerStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterForeignServerStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterForeignServerStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterForeignServerStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateUserMappingStmt
{
public:
    FieldModelPtr_pg_query_CreateUserMappingStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateUserMappingStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 146; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateUserMappingStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateUserMappingStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateUserMappingStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateUserMappingStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterUserMappingStmt
{
public:
    FieldModelPtr_pg_query_AlterUserMappingStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterUserMappingStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 147; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterUserMappingStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterUserMappingStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterUserMappingStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterUserMappingStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DropUserMappingStmt
{
public:
    FieldModelPtr_pg_query_DropUserMappingStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DropUserMappingStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 148; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DropUserMappingStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DropUserMappingStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DropUserMappingStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DropUserMappingStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterTableSpaceOptionsStmt
{
public:
    FieldModelPtr_pg_query_AlterTableSpaceOptionsStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterTableSpaceOptionsStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 149; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterTableSpaceOptionsStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterTableSpaceOptionsStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterTableSpaceOptionsStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterTableSpaceOptionsStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterTableMoveAllStmt
{
public:
    FieldModelPtr_pg_query_AlterTableMoveAllStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterTableMoveAllStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 150; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterTableMoveAllStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterTableMoveAllStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterTableMoveAllStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterTableMoveAllStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SecLabelStmt
{
public:
    FieldModelPtr_pg_query_SecLabelStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SecLabelStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 151; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SecLabelStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SecLabelStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SecLabelStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SecLabelStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateForeignTableStmt
{
public:
    FieldModelPtr_pg_query_CreateForeignTableStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateForeignTableStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 152; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateForeignTableStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateForeignTableStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateForeignTableStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateForeignTableStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ImportForeignSchemaStmt
{
public:
    FieldModelPtr_pg_query_ImportForeignSchemaStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ImportForeignSchemaStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 153; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ImportForeignSchemaStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ImportForeignSchemaStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ImportForeignSchemaStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ImportForeignSchemaStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateExtensionStmt
{
public:
    FieldModelPtr_pg_query_CreateExtensionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateExtensionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 154; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateExtensionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateExtensionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateExtensionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateExtensionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterExtensionStmt
{
public:
    FieldModelPtr_pg_query_AlterExtensionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterExtensionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 155; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterExtensionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterExtensionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterExtensionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterExtensionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterExtensionContentsStmt
{
public:
    FieldModelPtr_pg_query_AlterExtensionContentsStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterExtensionContentsStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 156; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterExtensionContentsStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterExtensionContentsStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterExtensionContentsStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterExtensionContentsStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateEventTrigStmt
{
public:
    FieldModelPtr_pg_query_CreateEventTrigStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateEventTrigStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 157; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateEventTrigStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateEventTrigStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateEventTrigStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateEventTrigStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterEventTrigStmt
{
public:
    FieldModelPtr_pg_query_AlterEventTrigStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterEventTrigStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 158; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterEventTrigStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterEventTrigStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterEventTrigStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterEventTrigStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RefreshMatViewStmt
{
public:
    FieldModelPtr_pg_query_RefreshMatViewStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RefreshMatViewStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 159; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RefreshMatViewStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RefreshMatViewStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RefreshMatViewStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RefreshMatViewStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ReplicaIdentityStmt
{
public:
    FieldModelPtr_pg_query_ReplicaIdentityStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ReplicaIdentityStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 160; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ReplicaIdentityStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ReplicaIdentityStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ReplicaIdentityStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ReplicaIdentityStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterSystemStmt
{
public:
    FieldModelPtr_pg_query_AlterSystemStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterSystemStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 161; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterSystemStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterSystemStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterSystemStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterSystemStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreatePolicyStmt
{
public:
    FieldModelPtr_pg_query_CreatePolicyStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreatePolicyStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 162; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreatePolicyStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreatePolicyStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreatePolicyStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreatePolicyStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterPolicyStmt
{
public:
    FieldModelPtr_pg_query_AlterPolicyStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterPolicyStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 163; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterPolicyStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterPolicyStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterPolicyStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterPolicyStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateTransformStmt
{
public:
    FieldModelPtr_pg_query_CreateTransformStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateTransformStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 164; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateTransformStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateTransformStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateTransformStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateTransformStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateAmStmt
{
public:
    FieldModelPtr_pg_query_CreateAmStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateAmStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 165; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateAmStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateAmStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateAmStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateAmStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreatePublicationStmt
{
public:
    FieldModelPtr_pg_query_CreatePublicationStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreatePublicationStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 166; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreatePublicationStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreatePublicationStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreatePublicationStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreatePublicationStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterPublicationStmt
{
public:
    FieldModelPtr_pg_query_AlterPublicationStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterPublicationStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 167; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterPublicationStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterPublicationStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterPublicationStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterPublicationStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateSubscriptionStmt
{
public:
    FieldModelPtr_pg_query_CreateSubscriptionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateSubscriptionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 168; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateSubscriptionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateSubscriptionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateSubscriptionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateSubscriptionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterSubscriptionStmt
{
public:
    FieldModelPtr_pg_query_AlterSubscriptionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterSubscriptionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 169; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterSubscriptionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterSubscriptionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterSubscriptionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterSubscriptionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DropSubscriptionStmt
{
public:
    FieldModelPtr_pg_query_DropSubscriptionStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DropSubscriptionStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 170; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DropSubscriptionStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DropSubscriptionStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DropSubscriptionStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DropSubscriptionStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateStatsStmt
{
public:
    FieldModelPtr_pg_query_CreateStatsStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateStatsStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 171; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateStatsStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateStatsStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateStatsStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateStatsStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterCollationStmt
{
public:
    FieldModelPtr_pg_query_AlterCollationStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterCollationStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 172; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterCollationStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterCollationStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterCollationStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterCollationStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CallStmt
{
public:
    FieldModelPtr_pg_query_CallStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CallStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 173; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CallStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CallStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CallStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CallStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AlterStatsStmt
{
public:
    FieldModelPtr_pg_query_AlterStatsStmt(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AlterStatsStmt();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 174; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AlterStatsStmt** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AlterStatsStmt& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AlterStatsStmt* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AlterStatsStmt* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_A_Expr
{
public:
    FieldModelPtr_pg_query_A_Expr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_A_Expr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 175; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::A_Expr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::A_Expr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::A_Expr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::A_Expr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ColumnRef
{
public:
    FieldModelPtr_pg_query_ColumnRef(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ColumnRef();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 176; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ColumnRef** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ColumnRef& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ColumnRef* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ColumnRef* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ParamRef
{
public:
    FieldModelPtr_pg_query_ParamRef(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ParamRef();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 177; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ParamRef** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ParamRef& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ParamRef* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ParamRef* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_A_Const
{
public:
    FieldModelPtr_pg_query_A_Const(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_A_Const();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 178; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::A_Const** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::A_Const& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::A_Const* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::A_Const* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_FuncCall
{
public:
    FieldModelPtr_pg_query_FuncCall(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_FuncCall();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 179; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::FuncCall** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::FuncCall& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::FuncCall* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::FuncCall* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_A_Star
{
public:
    FieldModelPtr_pg_query_A_Star(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_A_Star();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 180; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::A_Star** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::A_Star& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::A_Star* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::A_Star* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_A_Indices
{
public:
    FieldModelPtr_pg_query_A_Indices(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_A_Indices();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 181; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::A_Indices** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::A_Indices& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::A_Indices* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::A_Indices* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_A_Indirection
{
public:
    FieldModelPtr_pg_query_A_Indirection(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_A_Indirection();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 182; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::A_Indirection** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::A_Indirection& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::A_Indirection* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::A_Indirection* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_A_ArrayExpr
{
public:
    FieldModelPtr_pg_query_A_ArrayExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_A_ArrayExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 183; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::A_ArrayExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::A_ArrayExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::A_ArrayExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::A_ArrayExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ResTarget
{
public:
    FieldModelPtr_pg_query_ResTarget(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ResTarget();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 184; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ResTarget** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ResTarget& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ResTarget* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ResTarget* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_MultiAssignRef
{
public:
    FieldModelPtr_pg_query_MultiAssignRef(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_MultiAssignRef();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 185; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::MultiAssignRef** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::MultiAssignRef& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::MultiAssignRef* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::MultiAssignRef* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TypeCast
{
public:
    FieldModelPtr_pg_query_TypeCast(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TypeCast();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 186; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TypeCast** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TypeCast& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TypeCast* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TypeCast* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CollateClause
{
public:
    FieldModelPtr_pg_query_CollateClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CollateClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 187; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CollateClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CollateClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CollateClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CollateClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SortBy
{
public:
    FieldModelPtr_pg_query_SortBy(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SortBy();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 188; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SortBy** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SortBy& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SortBy* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SortBy* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_WindowDef
{
public:
    FieldModelPtr_pg_query_WindowDef(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_WindowDef();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 189; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::WindowDef** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::WindowDef& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::WindowDef* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::WindowDef* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeSubselect
{
public:
    FieldModelPtr_pg_query_RangeSubselect(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeSubselect();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 190; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeSubselect** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeSubselect& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeSubselect* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeSubselect* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeFunction
{
public:
    FieldModelPtr_pg_query_RangeFunction(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeFunction();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 191; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeFunction** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeFunction& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeFunction* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeFunction* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeTableSample
{
public:
    FieldModelPtr_pg_query_RangeTableSample(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeTableSample();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 192; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeTableSample** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeTableSample& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeTableSample* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeTableSample* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeTableFunc
{
public:
    FieldModelPtr_pg_query_RangeTableFunc(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeTableFunc();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 193; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeTableFunc** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeTableFunc& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeTableFunc* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeTableFunc* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeTableFuncCol
{
public:
    FieldModelPtr_pg_query_RangeTableFuncCol(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeTableFuncCol();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 194; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeTableFuncCol** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeTableFuncCol& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeTableFuncCol* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeTableFuncCol* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TypeName
{
public:
    FieldModelPtr_pg_query_TypeName(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TypeName();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 195; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TypeName** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TypeName& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TypeName* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TypeName* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ColumnDef
{
public:
    FieldModelPtr_pg_query_ColumnDef(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ColumnDef();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 196; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ColumnDef** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ColumnDef& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ColumnDef* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ColumnDef* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_IndexElem
{
public:
    FieldModelPtr_pg_query_IndexElem(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_IndexElem();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 197; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::IndexElem** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::IndexElem& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::IndexElem* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::IndexElem* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_Constraint
{
public:
    FieldModelPtr_pg_query_Constraint(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_Constraint();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 198; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::Constraint** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::Constraint& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::Constraint* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::Constraint* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_DefElem
{
public:
    FieldModelPtr_pg_query_DefElem(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_DefElem();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 199; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::DefElem** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::DefElem& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::DefElem* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::DefElem* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeTblEntry
{
public:
    FieldModelPtr_pg_query_RangeTblEntry(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeTblEntry();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 200; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeTblEntry** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeTblEntry& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeTblEntry* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeTblEntry* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RangeTblFunction
{
public:
    FieldModelPtr_pg_query_RangeTblFunction(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RangeTblFunction();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 201; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RangeTblFunction** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RangeTblFunction& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RangeTblFunction* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RangeTblFunction* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TableSampleClause
{
public:
    FieldModelPtr_pg_query_TableSampleClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TableSampleClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 202; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TableSampleClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TableSampleClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TableSampleClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TableSampleClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_WithCheckOption
{
public:
    FieldModelPtr_pg_query_WithCheckOption(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_WithCheckOption();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 203; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::WithCheckOption** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::WithCheckOption& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::WithCheckOption* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::WithCheckOption* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_SortGroupClause
{
public:
    FieldModelPtr_pg_query_SortGroupClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_SortGroupClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 204; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::SortGroupClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::SortGroupClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::SortGroupClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::SortGroupClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_GroupingSet
{
public:
    FieldModelPtr_pg_query_GroupingSet(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_GroupingSet();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 205; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::GroupingSet** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::GroupingSet& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::GroupingSet* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::GroupingSet* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_WindowClause
{
public:
    FieldModelPtr_pg_query_WindowClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_WindowClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 206; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::WindowClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::WindowClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::WindowClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::WindowClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ObjectWithArgs
{
public:
    FieldModelPtr_pg_query_ObjectWithArgs(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ObjectWithArgs();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 207; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ObjectWithArgs** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ObjectWithArgs& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ObjectWithArgs* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ObjectWithArgs* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_AccessPriv
{
public:
    FieldModelPtr_pg_query_AccessPriv(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_AccessPriv();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 208; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::AccessPriv** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::AccessPriv& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::AccessPriv* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::AccessPriv* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CreateOpClassItem
{
public:
    FieldModelPtr_pg_query_CreateOpClassItem(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CreateOpClassItem();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 209; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CreateOpClassItem** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CreateOpClassItem& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CreateOpClassItem* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CreateOpClassItem* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TableLikeClause
{
public:
    FieldModelPtr_pg_query_TableLikeClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TableLikeClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 210; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TableLikeClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TableLikeClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TableLikeClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TableLikeClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_FunctionParameter
{
public:
    FieldModelPtr_pg_query_FunctionParameter(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_FunctionParameter();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 211; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::FunctionParameter** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::FunctionParameter& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::FunctionParameter* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::FunctionParameter* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_LockingClause
{
public:
    FieldModelPtr_pg_query_LockingClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_LockingClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 212; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::LockingClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::LockingClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::LockingClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::LockingClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RowMarkClause
{
public:
    FieldModelPtr_pg_query_RowMarkClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RowMarkClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 213; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RowMarkClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RowMarkClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RowMarkClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RowMarkClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_XmlSerialize
{
public:
    FieldModelPtr_pg_query_XmlSerialize(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_XmlSerialize();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 214; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::XmlSerialize** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::XmlSerialize& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::XmlSerialize* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::XmlSerialize* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_WithClause
{
public:
    FieldModelPtr_pg_query_WithClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_WithClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 215; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::WithClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::WithClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::WithClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::WithClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_InferClause
{
public:
    FieldModelPtr_pg_query_InferClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_InferClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 216; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::InferClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::InferClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::InferClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::InferClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_OnConflictClause
{
public:
    FieldModelPtr_pg_query_OnConflictClause(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_OnConflictClause();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 217; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::OnConflictClause** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::OnConflictClause& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::OnConflictClause* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::OnConflictClause* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CommonTableExpr
{
public:
    FieldModelPtr_pg_query_CommonTableExpr(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CommonTableExpr();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 218; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CommonTableExpr** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CommonTableExpr& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CommonTableExpr* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CommonTableExpr* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_RoleSpec
{
public:
    FieldModelPtr_pg_query_RoleSpec(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_RoleSpec();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 219; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::RoleSpec** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::RoleSpec& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::RoleSpec* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::RoleSpec* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_TriggerTransition
{
public:
    FieldModelPtr_pg_query_TriggerTransition(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_TriggerTransition();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 220; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::TriggerTransition** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::TriggerTransition& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::TriggerTransition* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::TriggerTransition* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_PartitionElem
{
public:
    FieldModelPtr_pg_query_PartitionElem(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_PartitionElem();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 221; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::PartitionElem** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::PartitionElem& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::PartitionElem* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::PartitionElem* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_PartitionSpec
{
public:
    FieldModelPtr_pg_query_PartitionSpec(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_PartitionSpec();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 222; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::PartitionSpec** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::PartitionSpec& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::PartitionSpec* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::PartitionSpec* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_PartitionBoundSpec
{
public:
    FieldModelPtr_pg_query_PartitionBoundSpec(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_PartitionBoundSpec();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 223; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::PartitionBoundSpec** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::PartitionBoundSpec& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::PartitionBoundSpec* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::PartitionBoundSpec* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_PartitionRangeDatum
{
public:
    FieldModelPtr_pg_query_PartitionRangeDatum(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_PartitionRangeDatum();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 224; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::PartitionRangeDatum** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::PartitionRangeDatum& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::PartitionRangeDatum* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::PartitionRangeDatum* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_PartitionCmd
{
public:
    FieldModelPtr_pg_query_PartitionCmd(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_PartitionCmd();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 225; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::PartitionCmd** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::PartitionCmd& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::PartitionCmd* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::PartitionCmd* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_VacuumRelation
{
public:
    FieldModelPtr_pg_query_VacuumRelation(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_VacuumRelation();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 226; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::VacuumRelation** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::VacuumRelation& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::VacuumRelation* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::VacuumRelation* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_InlineCodeBlock
{
public:
    FieldModelPtr_pg_query_InlineCodeBlock(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_InlineCodeBlock();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 227; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::InlineCodeBlock** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::InlineCodeBlock& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::InlineCodeBlock* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::InlineCodeBlock* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_CallContext
{
public:
    FieldModelPtr_pg_query_CallContext(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_CallContext();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 228; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::CallContext** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::CallContext& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::CallContext* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::CallContext* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ScanToken
{
public:
    FieldModelPtr_pg_query_ScanToken(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ScanToken();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 229; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ScanToken** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ScanToken& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ScanToken* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ScanToken* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ParseResult
{
public:
    FieldModelPtr_pg_query_ParseResult(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ParseResult();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 230; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ParseResult** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ParseResult& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ParseResult* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ParseResult* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

class FieldModelPtr_pg_query_ScanResult
{
public:
    FieldModelPtr_pg_query_ScanResult(FBEBuffer& buffer, size_t offset) noexcept;
    ~FieldModelPtr_pg_query_ScanResult();

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 5; }
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 231; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify() const noexcept;
    // Check if the struct ptr is nullptr
    bool has_value() const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::pg_query::ScanResult** fbe_value) noexcept;
    // Get the struct fields values
    void get_fields(::pg_query::ScanResult& fbe_value, size_t fbe_struct_size) noexcept;

    // Set the struct value (begin phase)
    size_t set_begin(bool has_value);
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::pg_query::ScanResult* fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::pg_query::ScanResult* fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    BaseFieldModel* ptr{nullptr};
};

// Fast Binary Encoding ::pg_query::Integer field model
class FieldModel_pg_query_Integer : public BaseFieldModel
{
public:
    FieldModel_pg_query_Integer(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 1; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<int32_t> ival;
};

namespace pg_query {

// Fast Binary Encoding Integer model
class IntegerModel : public FBE::Model
{
public:
    IntegerModel() : model(this->buffer(), 4) {}
    IntegerModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Integer::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Integer& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Integer& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Integer model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Float field model
class FieldModel_pg_query_Float : public BaseFieldModel
{
public:
    FieldModel_pg_query_Float(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 2; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> str;
};

namespace pg_query {

// Fast Binary Encoding Float model
class FloatModel : public FBE::Model
{
public:
    FloatModel() : model(this->buffer(), 4) {}
    FloatModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Float::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Float& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Float& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Float model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::String field model
class FieldModel_pg_query_String : public BaseFieldModel
{
public:
    FieldModel_pg_query_String(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 3; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> str;
};

namespace pg_query {

// Fast Binary Encoding String model
class StringModel : public FBE::Model
{
public:
    StringModel() : model(this->buffer(), 4) {}
    StringModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_String::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::String& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::String& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_String model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::BitString field model
class FieldModel_pg_query_BitString : public BaseFieldModel
{
public:
    FieldModel_pg_query_BitString(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 4; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> str;
};

namespace pg_query {

// Fast Binary Encoding BitString model
class BitStringModel : public FBE::Model
{
public:
    BitStringModel() : model(this->buffer(), 4) {}
    BitStringModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_BitString::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::BitString& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::BitString& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_BitString model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Null field model
class FieldModel_pg_query_Null : public BaseFieldModel
{
public:
    FieldModel_pg_query_Null(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 5; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
};

namespace pg_query {

// Fast Binary Encoding Null model
class NullModel : public FBE::Model
{
public:
    NullModel() : model(this->buffer(), 4) {}
    NullModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Null::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Null& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Null& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Null model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::List field model
class FieldModel_pg_query_List : public BaseFieldModel
{
public:
    FieldModel_pg_query_List(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 6; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> items;
};

namespace pg_query {

// Fast Binary Encoding List model
class ListModel : public FBE::Model
{
public:
    ListModel() : model(this->buffer(), 4) {}
    ListModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_List::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::List& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::List& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_List model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::OidList field model
class FieldModel_pg_query_OidList : public BaseFieldModel
{
public:
    FieldModel_pg_query_OidList(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 7; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> items;
};

namespace pg_query {

// Fast Binary Encoding OidList model
class OidListModel : public FBE::Model
{
public:
    OidListModel() : model(this->buffer(), 4) {}
    OidListModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_OidList::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::OidList& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::OidList& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_OidList model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::IntList field model
class FieldModel_pg_query_IntList : public BaseFieldModel
{
public:
    FieldModel_pg_query_IntList(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 8; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> items;
};

namespace pg_query {

// Fast Binary Encoding IntList model
class IntListModel : public FBE::Model
{
public:
    IntListModel() : model(this->buffer(), 4) {}
    IntListModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_IntList::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::IntList& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::IntList& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_IntList model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Alias field model
class FieldModel_pg_query_Alias : public BaseFieldModel
{
public:
    FieldModel_pg_query_Alias(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 9; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> aliasname;
    FieldModelVector<::pg_query::Node> colnames;
};

namespace pg_query {

// Fast Binary Encoding Alias model
class AliasModel : public FBE::Model
{
public:
    AliasModel() : model(this->buffer(), 4) {}
    AliasModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Alias::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Alias& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Alias& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Alias model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeVar field model
class FieldModel_pg_query_RangeVar : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeVar(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 10; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> catalogname;
    FieldModel<std::pmr::string> schemaname;
    FieldModel<std::pmr::string> relname;
    FieldModel<bool> inh;
    FieldModel<std::pmr::string> relpersistence;
    FieldModelPtr_pg_query_Alias alias;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding RangeVar model
class RangeVarModel : public FBE::Model
{
public:
    RangeVarModel() : model(this->buffer(), 4) {}
    RangeVarModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeVar::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeVar& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeVar& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeVar model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TableFunc field model
class FieldModel_pg_query_TableFunc : public BaseFieldModel
{
public:
    FieldModel_pg_query_TableFunc(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 11; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> ns_uris;
    FieldModelVector<::pg_query::Node> ns_names;
    FieldModel<::pg_query::Node> docexpr;
    FieldModel<::pg_query::Node> rowexpr;
    FieldModelVector<::pg_query::Node> colnames;
    FieldModelVector<::pg_query::Node> coltypes;
    FieldModelVector<::pg_query::Node> coltypmods;
    FieldModelVector<::pg_query::Node> colcollations;
    FieldModelVector<::pg_query::Node> colexprs;
    FieldModelVector<::pg_query::Node> coldefexprs;
    FieldModelVector<uint64_t> notnulls;
    FieldModel<int32_t> ordinalitycol;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding TableFunc model
class TableFuncModel : public FBE::Model
{
public:
    TableFuncModel() : model(this->buffer(), 4) {}
    TableFuncModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TableFunc::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TableFunc& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TableFunc& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TableFunc model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Expr field model
class FieldModel_pg_query_Expr : public BaseFieldModel
{
public:
    FieldModel_pg_query_Expr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 12; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
};

namespace pg_query {

// Fast Binary Encoding Expr model
class ExprModel : public FBE::Model
{
public:
    ExprModel() : model(this->buffer(), 4) {}
    ExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Expr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Expr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Expr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Expr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Var field model
class FieldModel_pg_query_Var : public BaseFieldModel
{
public:
    FieldModel_pg_query_Var(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 13; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> varno;
    FieldModel<int32_t> varattno;
    FieldModel<uint32_t> vartype;
    FieldModel<int32_t> vartypmod;
    FieldModel<uint32_t> varcollid;
    FieldModel<uint32_t> varlevelsup;
    FieldModel<uint32_t> varnosyn;
    FieldModel<int32_t> varattnosyn;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding Var model
class VarModel : public FBE::Model
{
public:
    VarModel() : model(this->buffer(), 4) {}
    VarModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Var::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Var& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Var& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Var model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Param field model
class FieldModel_pg_query_Param : public BaseFieldModel
{
public:
    FieldModel_pg_query_Param(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 14; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::ParamKind> paramkind;
    FieldModel<int32_t> paramid;
    FieldModel<uint32_t> paramtype;
    FieldModel<int32_t> paramtypmod;
    FieldModel<uint32_t> paramcollid;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding Param model
class ParamModel : public FBE::Model
{
public:
    ParamModel() : model(this->buffer(), 4) {}
    ParamModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Param::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Param& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Param& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Param model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Aggref field model
class FieldModel_pg_query_Aggref : public BaseFieldModel
{
public:
    FieldModel_pg_query_Aggref(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 15; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> aggfnoid;
    FieldModel<uint32_t> aggtype;
    FieldModel<uint32_t> aggcollid;
    FieldModel<uint32_t> inputcollid;
    FieldModel<uint32_t> aggtranstype;
    FieldModelVector<::pg_query::Node> aggargtypes;
    FieldModelVector<::pg_query::Node> aggdirectargs;
    FieldModelVector<::pg_query::Node> args;
    FieldModelVector<::pg_query::Node> aggorder;
    FieldModelVector<::pg_query::Node> aggdistinct;
    FieldModel<::pg_query::Node> aggfilter;
    FieldModel<bool> aggstar;
    FieldModel<bool> aggvariadic;
    FieldModel<std::pmr::string> aggkind;
    FieldModel<uint32_t> agglevelsup;
    FieldModel<::pg_query::AggSplit> aggsplit;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding Aggref model
class AggrefModel : public FBE::Model
{
public:
    AggrefModel() : model(this->buffer(), 4) {}
    AggrefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Aggref::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Aggref& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Aggref& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Aggref model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::GroupingFunc field model
class FieldModel_pg_query_GroupingFunc : public BaseFieldModel
{
public:
    FieldModel_pg_query_GroupingFunc(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 16; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModelVector<::pg_query::Node> args;
    FieldModelVector<::pg_query::Node> refs;
    FieldModelVector<::pg_query::Node> cols;
    FieldModel<uint32_t> agglevelsup;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding GroupingFunc model
class GroupingFuncModel : public FBE::Model
{
public:
    GroupingFuncModel() : model(this->buffer(), 4) {}
    GroupingFuncModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_GroupingFunc::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::GroupingFunc& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::GroupingFunc& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_GroupingFunc model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::WindowFunc field model
class FieldModel_pg_query_WindowFunc : public BaseFieldModel
{
public:
    FieldModel_pg_query_WindowFunc(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 17; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> winfnoid;
    FieldModel<uint32_t> wintype;
    FieldModel<uint32_t> wincollid;
    FieldModel<uint32_t> inputcollid;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<::pg_query::Node> aggfilter;
    FieldModel<uint32_t> winref;
    FieldModel<bool> winstar;
    FieldModel<bool> winagg;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding WindowFunc model
class WindowFuncModel : public FBE::Model
{
public:
    WindowFuncModel() : model(this->buffer(), 4) {}
    WindowFuncModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_WindowFunc::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::WindowFunc& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::WindowFunc& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_WindowFunc model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SubscriptingRef field model
class FieldModel_pg_query_SubscriptingRef : public BaseFieldModel
{
public:
    FieldModel_pg_query_SubscriptingRef(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 18; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> refcontainertype;
    FieldModel<uint32_t> refelemtype;
    FieldModel<int32_t> reftypmod;
    FieldModel<uint32_t> refcollid;
    FieldModelVector<::pg_query::Node> refupperindexpr;
    FieldModelVector<::pg_query::Node> reflowerindexpr;
    FieldModel<::pg_query::Node> refexpr;
    FieldModel<::pg_query::Node> refassgnexpr;
};

namespace pg_query {

// Fast Binary Encoding SubscriptingRef model
class SubscriptingRefModel : public FBE::Model
{
public:
    SubscriptingRefModel() : model(this->buffer(), 4) {}
    SubscriptingRefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SubscriptingRef::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SubscriptingRef& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SubscriptingRef& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SubscriptingRef model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::FuncExpr field model
class FieldModel_pg_query_FuncExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_FuncExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 19; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> funcid;
    FieldModel<uint32_t> funcresulttype;
    FieldModel<bool> funcretset;
    FieldModel<bool> funcvariadic;
    FieldModel<::pg_query::CoercionForm> funcformat;
    FieldModel<uint32_t> funccollid;
    FieldModel<uint32_t> inputcollid;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding FuncExpr model
class FuncExprModel : public FBE::Model
{
public:
    FuncExprModel() : model(this->buffer(), 4) {}
    FuncExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_FuncExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::FuncExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::FuncExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_FuncExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::NamedArgExpr field model
class FieldModel_pg_query_NamedArgExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_NamedArgExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 20; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<std::pmr::string> name;
    FieldModel<int32_t> argnumber;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding NamedArgExpr model
class NamedArgExprModel : public FBE::Model
{
public:
    NamedArgExprModel() : model(this->buffer(), 4) {}
    NamedArgExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_NamedArgExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::NamedArgExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::NamedArgExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_NamedArgExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::OpExpr field model
class FieldModel_pg_query_OpExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_OpExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 21; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> opno;
    FieldModel<uint32_t> opfuncid;
    FieldModel<uint32_t> opresulttype;
    FieldModel<bool> opretset;
    FieldModel<uint32_t> opcollid;
    FieldModel<uint32_t> inputcollid;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding OpExpr model
class OpExprModel : public FBE::Model
{
public:
    OpExprModel() : model(this->buffer(), 4) {}
    OpExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_OpExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::OpExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::OpExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_OpExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DistinctExpr field model
class FieldModel_pg_query_DistinctExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_DistinctExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 22; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> opno;
    FieldModel<uint32_t> opfuncid;
    FieldModel<uint32_t> opresulttype;
    FieldModel<bool> opretset;
    FieldModel<uint32_t> opcollid;
    FieldModel<uint32_t> inputcollid;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding DistinctExpr model
class DistinctExprModel : public FBE::Model
{
public:
    DistinctExprModel() : model(this->buffer(), 4) {}
    DistinctExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DistinctExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DistinctExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DistinctExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DistinctExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::NullIfExpr field model
class FieldModel_pg_query_NullIfExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_NullIfExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 23; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> opno;
    FieldModel<uint32_t> opfuncid;
    FieldModel<uint32_t> opresulttype;
    FieldModel<bool> opretset;
    FieldModel<uint32_t> opcollid;
    FieldModel<uint32_t> inputcollid;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding NullIfExpr model
class NullIfExprModel : public FBE::Model
{
public:
    NullIfExprModel() : model(this->buffer(), 4) {}
    NullIfExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_NullIfExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::NullIfExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::NullIfExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_NullIfExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ScalarArrayOpExpr field model
class FieldModel_pg_query_ScalarArrayOpExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_ScalarArrayOpExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 24; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> opno;
    FieldModel<uint32_t> opfuncid;
    FieldModel<bool> use_or;
    FieldModel<uint32_t> inputcollid;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ScalarArrayOpExpr model
class ScalarArrayOpExprModel : public FBE::Model
{
public:
    ScalarArrayOpExprModel() : model(this->buffer(), 4) {}
    ScalarArrayOpExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ScalarArrayOpExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ScalarArrayOpExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ScalarArrayOpExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ScalarArrayOpExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::BoolExpr field model
class FieldModel_pg_query_BoolExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_BoolExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 25; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::BoolExprType> boolop;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding BoolExpr model
class BoolExprModel : public FBE::Model
{
public:
    BoolExprModel() : model(this->buffer(), 4) {}
    BoolExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_BoolExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::BoolExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::BoolExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_BoolExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SubLink field model
class FieldModel_pg_query_SubLink : public BaseFieldModel
{
public:
    FieldModel_pg_query_SubLink(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 26; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::SubLinkType> sub_link_type;
    FieldModel<int32_t> sub_link_id;
    FieldModel<::pg_query::Node> testexpr;
    FieldModelVector<::pg_query::Node> oper_name;
    FieldModel<::pg_query::Node> subselect;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding SubLink model
class SubLinkModel : public FBE::Model
{
public:
    SubLinkModel() : model(this->buffer(), 4) {}
    SubLinkModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SubLink::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SubLink& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SubLink& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SubLink model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SubPlan field model
class FieldModel_pg_query_SubPlan : public BaseFieldModel
{
public:
    FieldModel_pg_query_SubPlan(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 27; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::SubLinkType> sub_link_type;
    FieldModel<::pg_query::Node> testexpr;
    FieldModelVector<::pg_query::Node> param_ids;
    FieldModel<int32_t> plan_id;
    FieldModel<std::pmr::string> plan_name;
    FieldModel<uint32_t> first_col_type;
    FieldModel<int32_t> first_col_typmod;
    FieldModel<uint32_t> first_col_collation;
    FieldModel<bool> use_hash_table;
    FieldModel<bool> unknown_eq_false;
    FieldModel<bool> parallel_safe;
    FieldModelVector<::pg_query::Node> set_param;
    FieldModelVector<::pg_query::Node> par_param;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<double> startup_cost;
    FieldModel<double> per_call_cost;
};

namespace pg_query {

// Fast Binary Encoding SubPlan model
class SubPlanModel : public FBE::Model
{
public:
    SubPlanModel() : model(this->buffer(), 4) {}
    SubPlanModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SubPlan::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SubPlan& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SubPlan& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SubPlan model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlternativeSubPlan field model
class FieldModel_pg_query_AlternativeSubPlan : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlternativeSubPlan(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 28; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModelVector<::pg_query::Node> subplans;
};

namespace pg_query {

// Fast Binary Encoding AlternativeSubPlan model
class AlternativeSubPlanModel : public FBE::Model
{
public:
    AlternativeSubPlanModel() : model(this->buffer(), 4) {}
    AlternativeSubPlanModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlternativeSubPlan::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlternativeSubPlan& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlternativeSubPlan& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlternativeSubPlan model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::FieldSelect field model
class FieldModel_pg_query_FieldSelect : public BaseFieldModel
{
public:
    FieldModel_pg_query_FieldSelect(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 29; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<int32_t> fieldnum;
    FieldModel<uint32_t> resulttype;
    FieldModel<int32_t> resulttypmod;
    FieldModel<uint32_t> resultcollid;
};

namespace pg_query {

// Fast Binary Encoding FieldSelect model
class FieldSelectModel : public FBE::Model
{
public:
    FieldSelectModel() : model(this->buffer(), 4) {}
    FieldSelectModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_FieldSelect::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::FieldSelect& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::FieldSelect& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_FieldSelect model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::FieldStore field model
class FieldModel_pg_query_FieldStore : public BaseFieldModel
{
public:
    FieldModel_pg_query_FieldStore(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 30; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModelVector<::pg_query::Node> newvals;
    FieldModelVector<::pg_query::Node> fieldnums;
    FieldModel<uint32_t> resulttype;
};

namespace pg_query {

// Fast Binary Encoding FieldStore model
class FieldStoreModel : public FBE::Model
{
public:
    FieldStoreModel() : model(this->buffer(), 4) {}
    FieldStoreModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_FieldStore::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::FieldStore& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::FieldStore& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_FieldStore model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RelabelType field model
class FieldModel_pg_query_RelabelType : public BaseFieldModel
{
public:
    FieldModel_pg_query_RelabelType(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 31; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<uint32_t> resulttype;
    FieldModel<int32_t> resulttypmod;
    FieldModel<uint32_t> resultcollid;
    FieldModel<::pg_query::CoercionForm> relabelformat;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding RelabelType model
class RelabelTypeModel : public FBE::Model
{
public:
    RelabelTypeModel() : model(this->buffer(), 4) {}
    RelabelTypeModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RelabelType::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RelabelType& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RelabelType& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RelabelType model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CoerceViaIO field model
class FieldModel_pg_query_CoerceViaIO : public BaseFieldModel
{
public:
    FieldModel_pg_query_CoerceViaIO(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 32; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<uint32_t> resulttype;
    FieldModel<uint32_t> resultcollid;
    FieldModel<::pg_query::CoercionForm> coerceformat;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CoerceViaIO model
class CoerceViaIOModel : public FBE::Model
{
public:
    CoerceViaIOModel() : model(this->buffer(), 4) {}
    CoerceViaIOModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CoerceViaIO::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CoerceViaIO& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CoerceViaIO& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CoerceViaIO model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ArrayCoerceExpr field model
class FieldModel_pg_query_ArrayCoerceExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_ArrayCoerceExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 33; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<::pg_query::Node> elemexpr;
    FieldModel<uint32_t> resulttype;
    FieldModel<int32_t> resulttypmod;
    FieldModel<uint32_t> resultcollid;
    FieldModel<::pg_query::CoercionForm> coerceformat;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ArrayCoerceExpr model
class ArrayCoerceExprModel : public FBE::Model
{
public:
    ArrayCoerceExprModel() : model(this->buffer(), 4) {}
    ArrayCoerceExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ArrayCoerceExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ArrayCoerceExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ArrayCoerceExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ArrayCoerceExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ConvertRowtypeExpr field model
class FieldModel_pg_query_ConvertRowtypeExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_ConvertRowtypeExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 34; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<uint32_t> resulttype;
    FieldModel<::pg_query::CoercionForm> convertformat;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ConvertRowtypeExpr model
class ConvertRowtypeExprModel : public FBE::Model
{
public:
    ConvertRowtypeExprModel() : model(this->buffer(), 4) {}
    ConvertRowtypeExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ConvertRowtypeExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ConvertRowtypeExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ConvertRowtypeExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ConvertRowtypeExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CollateExpr field model
class FieldModel_pg_query_CollateExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_CollateExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 35; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<uint32_t> coll_oid;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CollateExpr model
class CollateExprModel : public FBE::Model
{
public:
    CollateExprModel() : model(this->buffer(), 4) {}
    CollateExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CollateExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CollateExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CollateExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CollateExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CaseExpr field model
class FieldModel_pg_query_CaseExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_CaseExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 36; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> casetype;
    FieldModel<uint32_t> casecollid;
    FieldModel<::pg_query::Node> arg;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<::pg_query::Node> defresult;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CaseExpr model
class CaseExprModel : public FBE::Model
{
public:
    CaseExprModel() : model(this->buffer(), 4) {}
    CaseExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CaseExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CaseExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CaseExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CaseExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CaseWhen field model
class FieldModel_pg_query_CaseWhen : public BaseFieldModel
{
public:
    FieldModel_pg_query_CaseWhen(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 37; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> expr;
    FieldModel<::pg_query::Node> result;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CaseWhen model
class CaseWhenModel : public FBE::Model
{
public:
    CaseWhenModel() : model(this->buffer(), 4) {}
    CaseWhenModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CaseWhen::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CaseWhen& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CaseWhen& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CaseWhen model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CaseTestExpr field model
class FieldModel_pg_query_CaseTestExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_CaseTestExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 38; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> type_id;
    FieldModel<int32_t> type_mod;
    FieldModel<uint32_t> collation;
};

namespace pg_query {

// Fast Binary Encoding CaseTestExpr model
class CaseTestExprModel : public FBE::Model
{
public:
    CaseTestExprModel() : model(this->buffer(), 4) {}
    CaseTestExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CaseTestExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CaseTestExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CaseTestExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CaseTestExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ArrayExpr field model
class FieldModel_pg_query_ArrayExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_ArrayExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 39; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> array_typeid;
    FieldModel<uint32_t> array_collid;
    FieldModel<uint32_t> element_typeid;
    FieldModelVector<::pg_query::Node> elements;
    FieldModel<bool> multidims;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ArrayExpr model
class ArrayExprModel : public FBE::Model
{
public:
    ArrayExprModel() : model(this->buffer(), 4) {}
    ArrayExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ArrayExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ArrayExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ArrayExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ArrayExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RowExpr field model
class FieldModel_pg_query_RowExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_RowExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 40; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<uint32_t> row_typeid;
    FieldModel<::pg_query::CoercionForm> row_format;
    FieldModelVector<::pg_query::Node> colnames;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding RowExpr model
class RowExprModel : public FBE::Model
{
public:
    RowExprModel() : model(this->buffer(), 4) {}
    RowExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RowExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RowExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RowExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RowExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RowCompareExpr field model
class FieldModel_pg_query_RowCompareExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_RowCompareExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 41; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::RowCompareType> rctype;
    FieldModelVector<::pg_query::Node> opnos;
    FieldModelVector<::pg_query::Node> opfamilies;
    FieldModelVector<::pg_query::Node> inputcollids;
    FieldModelVector<::pg_query::Node> largs;
    FieldModelVector<::pg_query::Node> rargs;
};

namespace pg_query {

// Fast Binary Encoding RowCompareExpr model
class RowCompareExprModel : public FBE::Model
{
public:
    RowCompareExprModel() : model(this->buffer(), 4) {}
    RowCompareExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RowCompareExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RowCompareExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RowCompareExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RowCompareExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CoalesceExpr field model
class FieldModel_pg_query_CoalesceExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_CoalesceExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 42; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> coalescetype;
    FieldModel<uint32_t> coalescecollid;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CoalesceExpr model
class CoalesceExprModel : public FBE::Model
{
public:
    CoalesceExprModel() : model(this->buffer(), 4) {}
    CoalesceExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CoalesceExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CoalesceExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CoalesceExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CoalesceExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::MinMaxExpr field model
class FieldModel_pg_query_MinMaxExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_MinMaxExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 43; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> minmaxtype;
    FieldModel<uint32_t> minmaxcollid;
    FieldModel<uint32_t> inputcollid;
    FieldModel<::pg_query::MinMaxOp> op;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding MinMaxExpr model
class MinMaxExprModel : public FBE::Model
{
public:
    MinMaxExprModel() : model(this->buffer(), 4) {}
    MinMaxExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_MinMaxExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::MinMaxExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::MinMaxExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_MinMaxExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SQLValueFunction field model
class FieldModel_pg_query_SQLValueFunction : public BaseFieldModel
{
public:
    FieldModel_pg_query_SQLValueFunction(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 44; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::SQLValueFunctionOp> op;
    FieldModel<uint32_t> type;
    FieldModel<int32_t> typmod;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding SQLValueFunction model
class SQLValueFunctionModel : public FBE::Model
{
public:
    SQLValueFunctionModel() : model(this->buffer(), 4) {}
    SQLValueFunctionModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SQLValueFunction::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SQLValueFunction& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SQLValueFunction& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SQLValueFunction model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::XmlExpr field model
class FieldModel_pg_query_XmlExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_XmlExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 45; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::XmlExprOp> op;
    FieldModel<std::pmr::string> name;
    FieldModelVector<::pg_query::Node> named_args;
    FieldModelVector<::pg_query::Node> arg_names;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<::pg_query::XmlOptionType> xmloption;
    FieldModel<uint32_t> type;
    FieldModel<int32_t> typmod;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding XmlExpr model
class XmlExprModel : public FBE::Model
{
public:
    XmlExprModel() : model(this->buffer(), 4) {}
    XmlExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_XmlExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::XmlExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::XmlExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_XmlExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::NullTest field model
class FieldModel_pg_query_NullTest : public BaseFieldModel
{
public:
    FieldModel_pg_query_NullTest(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 46; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<::pg_query::NullTestType> nulltesttype;
    FieldModel<bool> argisrow;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding NullTest model
class NullTestModel : public FBE::Model
{
public:
    NullTestModel() : model(this->buffer(), 4) {}
    NullTestModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_NullTest::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::NullTest& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::NullTest& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_NullTest model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::BooleanTest field model
class FieldModel_pg_query_BooleanTest : public BaseFieldModel
{
public:
    FieldModel_pg_query_BooleanTest(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 47; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<::pg_query::BoolTestType> booltesttype;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding BooleanTest model
class BooleanTestModel : public FBE::Model
{
public:
    BooleanTestModel() : model(this->buffer(), 4) {}
    BooleanTestModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_BooleanTest::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::BooleanTest& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::BooleanTest& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_BooleanTest model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CoerceToDomain field model
class FieldModel_pg_query_CoerceToDomain : public BaseFieldModel
{
public:
    FieldModel_pg_query_CoerceToDomain(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 48; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> arg;
    FieldModel<uint32_t> resulttype;
    FieldModel<int32_t> resulttypmod;
    FieldModel<uint32_t> resultcollid;
    FieldModel<::pg_query::CoercionForm> coercionformat;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CoerceToDomain model
class CoerceToDomainModel : public FBE::Model
{
public:
    CoerceToDomainModel() : model(this->buffer(), 4) {}
    CoerceToDomainModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CoerceToDomain::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CoerceToDomain& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CoerceToDomain& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CoerceToDomain model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CoerceToDomainValue field model
class FieldModel_pg_query_CoerceToDomainValue : public BaseFieldModel
{
public:
    FieldModel_pg_query_CoerceToDomainValue(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 49; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> type_id;
    FieldModel<int32_t> type_mod;
    FieldModel<uint32_t> collation;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CoerceToDomainValue model
class CoerceToDomainValueModel : public FBE::Model
{
public:
    CoerceToDomainValueModel() : model(this->buffer(), 4) {}
    CoerceToDomainValueModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CoerceToDomainValue::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CoerceToDomainValue& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CoerceToDomainValue& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CoerceToDomainValue model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SetToDefault field model
class FieldModel_pg_query_SetToDefault : public BaseFieldModel
{
public:
    FieldModel_pg_query_SetToDefault(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 50; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> type_id;
    FieldModel<int32_t> type_mod;
    FieldModel<uint32_t> collation;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding SetToDefault model
class SetToDefaultModel : public FBE::Model
{
public:
    SetToDefaultModel() : model(this->buffer(), 4) {}
    SetToDefaultModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SetToDefault::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SetToDefault& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SetToDefault& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SetToDefault model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CurrentOfExpr field model
class FieldModel_pg_query_CurrentOfExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_CurrentOfExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 51; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> cvarno;
    FieldModel<std::pmr::string> cursor_name;
    FieldModel<int32_t> cursor_param;
};

namespace pg_query {

// Fast Binary Encoding CurrentOfExpr model
class CurrentOfExprModel : public FBE::Model
{
public:
    CurrentOfExprModel() : model(this->buffer(), 4) {}
    CurrentOfExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CurrentOfExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CurrentOfExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CurrentOfExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CurrentOfExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::NextValueExpr field model
class FieldModel_pg_query_NextValueExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_NextValueExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 52; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<uint32_t> seqid;
    FieldModel<uint32_t> type_id;
};

namespace pg_query {

// Fast Binary Encoding NextValueExpr model
class NextValueExprModel : public FBE::Model
{
public:
    NextValueExprModel() : model(this->buffer(), 4) {}
    NextValueExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_NextValueExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::NextValueExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::NextValueExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_NextValueExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::InferenceElem field model
class FieldModel_pg_query_InferenceElem : public BaseFieldModel
{
public:
    FieldModel_pg_query_InferenceElem(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 53; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> expr;
    FieldModel<uint32_t> infercollid;
    FieldModel<uint32_t> inferopclass;
};

namespace pg_query {

// Fast Binary Encoding InferenceElem model
class InferenceElemModel : public FBE::Model
{
public:
    InferenceElemModel() : model(this->buffer(), 4) {}
    InferenceElemModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_InferenceElem::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::InferenceElem& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::InferenceElem& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_InferenceElem model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TargetEntry field model
class FieldModel_pg_query_TargetEntry : public BaseFieldModel
{
public:
    FieldModel_pg_query_TargetEntry(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 54; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> xpr;
    FieldModel<::pg_query::Node> expr;
    FieldModel<int32_t> resno;
    FieldModel<std::pmr::string> resname;
    FieldModel<uint32_t> ressortgroupref;
    FieldModel<uint32_t> resorigtbl;
    FieldModel<int32_t> resorigcol;
    FieldModel<bool> resjunk;
};

namespace pg_query {

// Fast Binary Encoding TargetEntry model
class TargetEntryModel : public FBE::Model
{
public:
    TargetEntryModel() : model(this->buffer(), 4) {}
    TargetEntryModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TargetEntry::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TargetEntry& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TargetEntry& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TargetEntry model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeTblRef field model
class FieldModel_pg_query_RangeTblRef : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeTblRef(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 55; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<int32_t> rtindex;
};

namespace pg_query {

// Fast Binary Encoding RangeTblRef model
class RangeTblRefModel : public FBE::Model
{
public:
    RangeTblRefModel() : model(this->buffer(), 4) {}
    RangeTblRefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeTblRef::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeTblRef& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeTblRef& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeTblRef model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::JoinExpr field model
class FieldModel_pg_query_JoinExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_JoinExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 56; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::JoinType> jointype;
    FieldModel<bool> is_natural;
    FieldModel<::pg_query::Node> larg;
    FieldModel<::pg_query::Node> rarg;
    FieldModelVector<::pg_query::Node> using_clause;
    FieldModel<::pg_query::Node> quals;
    FieldModelPtr_pg_query_Alias alias;
    FieldModel<int32_t> rtindex;
};

namespace pg_query {

// Fast Binary Encoding JoinExpr model
class JoinExprModel : public FBE::Model
{
public:
    JoinExprModel() : model(this->buffer(), 4) {}
    JoinExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_JoinExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::JoinExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::JoinExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_JoinExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::FromExpr field model
class FieldModel_pg_query_FromExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_FromExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 57; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> fromlist;
    FieldModel<::pg_query::Node> quals;
};

namespace pg_query {

// Fast Binary Encoding FromExpr model
class FromExprModel : public FBE::Model
{
public:
    FromExprModel() : model(this->buffer(), 4) {}
    FromExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_FromExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::FromExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::FromExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_FromExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::OnConflictExpr field model
class FieldModel_pg_query_OnConflictExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_OnConflictExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 58; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::OnConflictAction> action;
    FieldModelVector<::pg_query::Node> arbiter_elems;
    FieldModel<::pg_query::Node> arbiter_where;
    FieldModel<uint32_t> constraint;
    FieldModelVector<::pg_query::Node> on_conflict_set;
    FieldModel<::pg_query::Node> on_conflict_where;
    FieldModel<int32_t> excl_rel_index;
    FieldModelVector<::pg_query::Node> excl_rel_tlist;
};

namespace pg_query {

// Fast Binary Encoding OnConflictExpr model
class OnConflictExprModel : public FBE::Model
{
public:
    OnConflictExprModel() : model(this->buffer(), 4) {}
    OnConflictExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_OnConflictExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::OnConflictExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::OnConflictExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_OnConflictExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::IntoClause field model
class FieldModel_pg_query_IntoClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_IntoClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 59; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar rel;
    FieldModelVector<::pg_query::Node> col_names;
    FieldModel<std::pmr::string> access_method;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<::pg_query::OnCommitAction> on_commit;
    FieldModel<std::pmr::string> table_space_name;
    FieldModel<::pg_query::Node> view_query;
    FieldModel<bool> skip_data;
};

namespace pg_query {

// Fast Binary Encoding IntoClause model
class IntoClauseModel : public FBE::Model
{
public:
    IntoClauseModel() : model(this->buffer(), 4) {}
    IntoClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_IntoClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::IntoClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::IntoClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_IntoClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RawStmt field model
class FieldModel_pg_query_RawStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_RawStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 60; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> stmt;
    FieldModel<int32_t> stmt_location;
    FieldModel<int32_t> stmt_len;
};

namespace pg_query {

// Fast Binary Encoding RawStmt model
class RawStmtModel : public FBE::Model
{
public:
    RawStmtModel() : model(this->buffer(), 4) {}
    RawStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RawStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RawStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RawStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RawStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Query field model
class FieldModel_pg_query_Query : public BaseFieldModel
{
public:
    FieldModel_pg_query_Query(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 61; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::CmdType> command_type;
    FieldModel<::pg_query::QuerySource> query_source;
    FieldModel<bool> can_set_tag;
    FieldModel<::pg_query::Node> utility_stmt;
    FieldModel<int32_t> result_relation;
    FieldModel<bool> has_aggs;
    FieldModel<bool> has_window_funcs;
    FieldModel<bool> has_target_srfs;
    FieldModel<bool> has_sub_links;
    FieldModel<bool> has_distinct_on;
    FieldModel<bool> has_recursive;
    FieldModel<bool> has_modifying_cte;
    FieldModel<bool> has_for_update;
    FieldModel<bool> has_row_security;
    FieldModelVector<::pg_query::Node> cte_list;
    FieldModelVector<::pg_query::Node> rtable;
    FieldModelPtr_pg_query_FromExpr jointree;
    FieldModelVector<::pg_query::Node> target_list;
    FieldModel<::pg_query::OverridingKind> override;
    FieldModelPtr_pg_query_OnConflictExpr on_conflict;
    FieldModelVector<::pg_query::Node> returning_list;
    FieldModelVector<::pg_query::Node> group_clause;
    FieldModelVector<::pg_query::Node> grouping_sets;
    FieldModel<::pg_query::Node> having_qual;
    FieldModelVector<::pg_query::Node> window_clause;
    FieldModelVector<::pg_query::Node> distinct_clause;
    FieldModelVector<::pg_query::Node> sort_clause;
    FieldModel<::pg_query::Node> limit_offset;
    FieldModel<::pg_query::Node> limit_count;
    FieldModel<::pg_query::LimitOption> limit_option;
    FieldModelVector<::pg_query::Node> row_marks;
    FieldModel<::pg_query::Node> set_operations;
    FieldModelVector<::pg_query::Node> constraint_deps;
    FieldModelVector<::pg_query::Node> with_check_options;
    FieldModel<int32_t> stmt_location;
    FieldModel<int32_t> stmt_len;
};

namespace pg_query {

// Fast Binary Encoding Query model
class QueryModel : public FBE::Model
{
public:
    QueryModel() : model(this->buffer(), 4) {}
    QueryModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Query::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Query& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Query& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Query model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::InsertStmt field model
class FieldModel_pg_query_InsertStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_InsertStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 62; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModelVector<::pg_query::Node> cols;
    FieldModel<::pg_query::Node> select_stmt;
    FieldModelPtr_pg_query_OnConflictClause on_conflict_clause;
    FieldModelVector<::pg_query::Node> returning_list;
    FieldModelPtr_pg_query_WithClause with_clause;
    FieldModel<::pg_query::OverridingKind> override;
};

namespace pg_query {

// Fast Binary Encoding InsertStmt model
class InsertStmtModel : public FBE::Model
{
public:
    InsertStmtModel() : model(this->buffer(), 4) {}
    InsertStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_InsertStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::InsertStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::InsertStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_InsertStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DeleteStmt field model
class FieldModel_pg_query_DeleteStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DeleteStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 63; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModelVector<::pg_query::Node> using_clause;
    FieldModel<::pg_query::Node> where_clause;
    FieldModelVector<::pg_query::Node> returning_list;
    FieldModelPtr_pg_query_WithClause with_clause;
};

namespace pg_query {

// Fast Binary Encoding DeleteStmt model
class DeleteStmtModel : public FBE::Model
{
public:
    DeleteStmtModel() : model(this->buffer(), 4) {}
    DeleteStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DeleteStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DeleteStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DeleteStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DeleteStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::UpdateStmt field model
class FieldModel_pg_query_UpdateStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_UpdateStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 64; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModelVector<::pg_query::Node> target_list;
    FieldModel<::pg_query::Node> where_clause;
    FieldModelVector<::pg_query::Node> from_clause;
    FieldModelVector<::pg_query::Node> returning_list;
    FieldModelPtr_pg_query_WithClause with_clause;
};

namespace pg_query {

// Fast Binary Encoding UpdateStmt model
class UpdateStmtModel : public FBE::Model
{
public:
    UpdateStmtModel() : model(this->buffer(), 4) {}
    UpdateStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_UpdateStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::UpdateStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::UpdateStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_UpdateStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SelectStmt field model
class FieldModel_pg_query_SelectStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_SelectStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 65; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> distinct_clause;
    FieldModelPtr_pg_query_IntoClause into_clause;
    FieldModelVector<::pg_query::Node> target_list;
    FieldModelVector<::pg_query::Node> from_clause;
    FieldModel<::pg_query::Node> where_clause;
    FieldModelVector<::pg_query::Node> group_clause;
    FieldModel<::pg_query::Node> having_clause;
    FieldModelVector<::pg_query::Node> window_clause;
    FieldModelVector<::pg_query::Node> values_lists;
    FieldModelVector<::pg_query::Node> sort_clause;
    FieldModel<::pg_query::Node> limit_offset;
    FieldModel<::pg_query::Node> limit_count;
    FieldModel<::pg_query::LimitOption> limit_option;
    FieldModelVector<::pg_query::Node> locking_clause;
    FieldModelPtr_pg_query_WithClause with_clause;
    FieldModel<::pg_query::SetOperation> op;
    FieldModel<bool> all;
    FieldModelPtr_pg_query_SelectStmt larg;
    FieldModelPtr_pg_query_SelectStmt rarg;
};

namespace pg_query {

// Fast Binary Encoding SelectStmt model
class SelectStmtModel : public FBE::Model
{
public:
    SelectStmtModel() : model(this->buffer(), 4) {}
    SelectStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SelectStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SelectStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SelectStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SelectStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterTableStmt field model
class FieldModel_pg_query_AlterTableStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterTableStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 66; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModelVector<::pg_query::Node> cmds;
    FieldModel<::pg_query::ObjectType> relkind;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding AlterTableStmt model
class AlterTableStmtModel : public FBE::Model
{
public:
    AlterTableStmtModel() : model(this->buffer(), 4) {}
    AlterTableStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterTableStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterTableStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterTableStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterTableStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterTableCmd field model
class FieldModel_pg_query_AlterTableCmd : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterTableCmd(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 67; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::AlterTableType> subtype;
    FieldModel<std::pmr::string> name;
    FieldModel<int32_t> num;
    FieldModelPtr_pg_query_RoleSpec newowner;
    FieldModel<::pg_query::Node> def;
    FieldModel<::pg_query::DropBehavior> behavior;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding AlterTableCmd model
class AlterTableCmdModel : public FBE::Model
{
public:
    AlterTableCmdModel() : model(this->buffer(), 4) {}
    AlterTableCmdModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterTableCmd::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterTableCmd& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterTableCmd& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterTableCmd model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterDomainStmt field model
class FieldModel_pg_query_AlterDomainStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterDomainStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 68; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> subtype;
    FieldModelVector<::pg_query::Node> type_name;
    FieldModel<std::pmr::string> name;
    FieldModel<::pg_query::Node> def;
    FieldModel<::pg_query::DropBehavior> behavior;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding AlterDomainStmt model
class AlterDomainStmtModel : public FBE::Model
{
public:
    AlterDomainStmtModel() : model(this->buffer(), 4) {}
    AlterDomainStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterDomainStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterDomainStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterDomainStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterDomainStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SetOperationStmt field model
class FieldModel_pg_query_SetOperationStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_SetOperationStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 69; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::SetOperation> op;
    FieldModel<bool> all;
    FieldModel<::pg_query::Node> larg;
    FieldModel<::pg_query::Node> rarg;
    FieldModelVector<::pg_query::Node> col_types;
    FieldModelVector<::pg_query::Node> col_typmods;
    FieldModelVector<::pg_query::Node> col_collations;
    FieldModelVector<::pg_query::Node> group_clauses;
};

namespace pg_query {

// Fast Binary Encoding SetOperationStmt model
class SetOperationStmtModel : public FBE::Model
{
public:
    SetOperationStmtModel() : model(this->buffer(), 4) {}
    SetOperationStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SetOperationStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SetOperationStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SetOperationStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SetOperationStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::GrantStmt field model
class FieldModel_pg_query_GrantStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_GrantStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 70; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> is_grant;
    FieldModel<::pg_query::GrantTargetType> targtype;
    FieldModel<::pg_query::ObjectType> objtype;
    FieldModelVector<::pg_query::Node> objects;
    FieldModelVector<::pg_query::Node> privileges;
    FieldModelVector<::pg_query::Node> grantees;
    FieldModel<bool> grant_option;
    FieldModel<::pg_query::DropBehavior> behavior;
};

namespace pg_query {

// Fast Binary Encoding GrantStmt model
class GrantStmtModel : public FBE::Model
{
public:
    GrantStmtModel() : model(this->buffer(), 4) {}
    GrantStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_GrantStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::GrantStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::GrantStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_GrantStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::GrantRoleStmt field model
class FieldModel_pg_query_GrantRoleStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_GrantRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 71; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> granted_roles;
    FieldModelVector<::pg_query::Node> grantee_roles;
    FieldModel<bool> is_grant;
    FieldModel<bool> admin_opt;
    FieldModelPtr_pg_query_RoleSpec grantor;
    FieldModel<::pg_query::DropBehavior> behavior;
};

namespace pg_query {

// Fast Binary Encoding GrantRoleStmt model
class GrantRoleStmtModel : public FBE::Model
{
public:
    GrantRoleStmtModel() : model(this->buffer(), 4) {}
    GrantRoleStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_GrantRoleStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::GrantRoleStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::GrantRoleStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_GrantRoleStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterDefaultPrivilegesStmt field model
class FieldModel_pg_query_AlterDefaultPrivilegesStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterDefaultPrivilegesStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 72; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> options;
    FieldModelPtr_pg_query_GrantStmt action;
};

namespace pg_query {

// Fast Binary Encoding AlterDefaultPrivilegesStmt model
class AlterDefaultPrivilegesStmtModel : public FBE::Model
{
public:
    AlterDefaultPrivilegesStmtModel() : model(this->buffer(), 4) {}
    AlterDefaultPrivilegesStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterDefaultPrivilegesStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterDefaultPrivilegesStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterDefaultPrivilegesStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterDefaultPrivilegesStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ClosePortalStmt field model
class FieldModel_pg_query_ClosePortalStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ClosePortalStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 73; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> portalname;
};

namespace pg_query {

// Fast Binary Encoding ClosePortalStmt model
class ClosePortalStmtModel : public FBE::Model
{
public:
    ClosePortalStmtModel() : model(this->buffer(), 4) {}
    ClosePortalStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ClosePortalStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ClosePortalStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ClosePortalStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ClosePortalStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ClusterStmt field model
class FieldModel_pg_query_ClusterStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ClusterStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 74; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<std::pmr::string> indexname;
    FieldModel<int32_t> options;
};

namespace pg_query {

// Fast Binary Encoding ClusterStmt model
class ClusterStmtModel : public FBE::Model
{
public:
    ClusterStmtModel() : model(this->buffer(), 4) {}
    ClusterStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ClusterStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ClusterStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ClusterStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ClusterStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CopyStmt field model
class FieldModel_pg_query_CopyStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CopyStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 75; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<::pg_query::Node> query;
    FieldModelVector<::pg_query::Node> attlist;
    FieldModel<bool> is_from;
    FieldModel<bool> is_program;
    FieldModel<std::pmr::string> filename;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<::pg_query::Node> where_clause;
};

namespace pg_query {

// Fast Binary Encoding CopyStmt model
class CopyStmtModel : public FBE::Model
{
public:
    CopyStmtModel() : model(this->buffer(), 4) {}
    CopyStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CopyStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CopyStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CopyStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CopyStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateStmt field model
class FieldModel_pg_query_CreateStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 76; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModelVector<::pg_query::Node> table_elts;
    FieldModelVector<::pg_query::Node> inh_relations;
    FieldModelPtr_pg_query_PartitionBoundSpec partbound;
    FieldModelPtr_pg_query_PartitionSpec partspec;
    FieldModelPtr_pg_query_TypeName of_typename;
    FieldModelVector<::pg_query::Node> constraints;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<::pg_query::OnCommitAction> oncommit;
    FieldModel<std::pmr::string> tablespacename;
    FieldModel<std::pmr::string> access_method;
    FieldModel<bool> if_not_exists;
};

namespace pg_query {

// Fast Binary Encoding CreateStmt model
class CreateStmtModel : public FBE::Model
{
public:
    CreateStmtModel() : model(this->buffer(), 4) {}
    CreateStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DefineStmt field model
class FieldModel_pg_query_DefineStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DefineStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 77; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> kind;
    FieldModel<bool> oldstyle;
    FieldModelVector<::pg_query::Node> defnames;
    FieldModelVector<::pg_query::Node> args;
    FieldModelVector<::pg_query::Node> definition;
    FieldModel<bool> if_not_exists;
    FieldModel<bool> replace;
};

namespace pg_query {

// Fast Binary Encoding DefineStmt model
class DefineStmtModel : public FBE::Model
{
public:
    DefineStmtModel() : model(this->buffer(), 4) {}
    DefineStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DefineStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DefineStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DefineStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DefineStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DropStmt field model
class FieldModel_pg_query_DropStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DropStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 78; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> objects;
    FieldModel<::pg_query::ObjectType> remove_type;
    FieldModel<::pg_query::DropBehavior> behavior;
    FieldModel<bool> missing_ok;
    FieldModel<bool> concurrent;
};

namespace pg_query {

// Fast Binary Encoding DropStmt model
class DropStmtModel : public FBE::Model
{
public:
    DropStmtModel() : model(this->buffer(), 4) {}
    DropStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DropStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DropStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DropStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DropStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TruncateStmt field model
class FieldModel_pg_query_TruncateStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_TruncateStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 79; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> relations;
    FieldModel<bool> restart_seqs;
    FieldModel<::pg_query::DropBehavior> behavior;
};

namespace pg_query {

// Fast Binary Encoding TruncateStmt model
class TruncateStmtModel : public FBE::Model
{
public:
    TruncateStmtModel() : model(this->buffer(), 4) {}
    TruncateStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TruncateStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TruncateStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TruncateStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TruncateStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CommentStmt field model
class FieldModel_pg_query_CommentStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CommentStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 80; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> objtype;
    FieldModel<::pg_query::Node> object;
    FieldModel<std::pmr::string> comment;
};

namespace pg_query {

// Fast Binary Encoding CommentStmt model
class CommentStmtModel : public FBE::Model
{
public:
    CommentStmtModel() : model(this->buffer(), 4) {}
    CommentStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CommentStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CommentStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CommentStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CommentStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::FetchStmt field model
class FieldModel_pg_query_FetchStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_FetchStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 81; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::FetchDirection> direction;
    FieldModel<int64_t> how_many;
    FieldModel<std::pmr::string> portalname;
    FieldModel<bool> ismove;
};

namespace pg_query {

// Fast Binary Encoding FetchStmt model
class FetchStmtModel : public FBE::Model
{
public:
    FetchStmtModel() : model(this->buffer(), 4) {}
    FetchStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_FetchStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::FetchStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::FetchStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_FetchStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::IndexStmt field model
class FieldModel_pg_query_IndexStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_IndexStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 82; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> idxname;
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<std::pmr::string> access_method;
    FieldModel<std::pmr::string> table_space;
    FieldModelVector<::pg_query::Node> index_params;
    FieldModelVector<::pg_query::Node> index_including_params;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<::pg_query::Node> where_clause;
    FieldModelVector<::pg_query::Node> exclude_op_names;
    FieldModel<std::pmr::string> idxcomment;
    FieldModel<uint32_t> index_oid;
    FieldModel<uint32_t> old_node;
    FieldModel<uint32_t> old_create_subid;
    FieldModel<uint32_t> old_first_relfilenode_subid;
    FieldModel<bool> unique;
    FieldModel<bool> primary;
    FieldModel<bool> isconstraint;
    FieldModel<bool> deferrable;
    FieldModel<bool> initdeferred;
    FieldModel<bool> transformed;
    FieldModel<bool> concurrent;
    FieldModel<bool> if_not_exists;
    FieldModel<bool> reset_default_tblspc;
};

namespace pg_query {

// Fast Binary Encoding IndexStmt model
class IndexStmtModel : public FBE::Model
{
public:
    IndexStmtModel() : model(this->buffer(), 4) {}
    IndexStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_IndexStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::IndexStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::IndexStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_IndexStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateFunctionStmt field model
class FieldModel_pg_query_CreateFunctionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateFunctionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 83; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> is_procedure;
    FieldModel<bool> replace;
    FieldModelVector<::pg_query::Node> funcname;
    FieldModelVector<::pg_query::Node> parameters;
    FieldModelPtr_pg_query_TypeName return_type;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateFunctionStmt model
class CreateFunctionStmtModel : public FBE::Model
{
public:
    CreateFunctionStmtModel() : model(this->buffer(), 4) {}
    CreateFunctionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateFunctionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateFunctionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateFunctionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateFunctionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterFunctionStmt field model
class FieldModel_pg_query_AlterFunctionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterFunctionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 84; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> objtype;
    FieldModelPtr_pg_query_ObjectWithArgs func;
    FieldModelVector<::pg_query::Node> actions;
};

namespace pg_query {

// Fast Binary Encoding AlterFunctionStmt model
class AlterFunctionStmtModel : public FBE::Model
{
public:
    AlterFunctionStmtModel() : model(this->buffer(), 4) {}
    AlterFunctionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterFunctionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterFunctionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterFunctionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterFunctionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DoStmt field model
class FieldModel_pg_query_DoStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DoStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 85; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> args;
};

namespace pg_query {

// Fast Binary Encoding DoStmt model
class DoStmtModel : public FBE::Model
{
public:
    DoStmtModel() : model(this->buffer(), 4) {}
    DoStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DoStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DoStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DoStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DoStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RenameStmt field model
class FieldModel_pg_query_RenameStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_RenameStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 86; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> rename_type;
    FieldModel<::pg_query::ObjectType> relation_type;
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<::pg_query::Node> object;
    FieldModel<std::pmr::string> subname;
    FieldModel<std::pmr::string> newname;
    FieldModel<::pg_query::DropBehavior> behavior;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding RenameStmt model
class RenameStmtModel : public FBE::Model
{
public:
    RenameStmtModel() : model(this->buffer(), 4) {}
    RenameStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RenameStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RenameStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RenameStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RenameStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RuleStmt field model
class FieldModel_pg_query_RuleStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_RuleStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 87; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<std::pmr::string> rulename;
    FieldModel<::pg_query::Node> where_clause;
    FieldModel<::pg_query::CmdType> event;
    FieldModel<bool> instead;
    FieldModelVector<::pg_query::Node> actions;
    FieldModel<bool> replace;
};

namespace pg_query {

// Fast Binary Encoding RuleStmt model
class RuleStmtModel : public FBE::Model
{
public:
    RuleStmtModel() : model(this->buffer(), 4) {}
    RuleStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RuleStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RuleStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RuleStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RuleStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::NotifyStmt field model
class FieldModel_pg_query_NotifyStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_NotifyStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 88; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> conditionname;
    FieldModel<std::pmr::string> payload;
};

namespace pg_query {

// Fast Binary Encoding NotifyStmt model
class NotifyStmtModel : public FBE::Model
{
public:
    NotifyStmtModel() : model(this->buffer(), 4) {}
    NotifyStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_NotifyStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::NotifyStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::NotifyStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_NotifyStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ListenStmt field model
class FieldModel_pg_query_ListenStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ListenStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 89; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> conditionname;
};

namespace pg_query {

// Fast Binary Encoding ListenStmt model
class ListenStmtModel : public FBE::Model
{
public:
    ListenStmtModel() : model(this->buffer(), 4) {}
    ListenStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ListenStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ListenStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ListenStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ListenStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::UnlistenStmt field model
class FieldModel_pg_query_UnlistenStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_UnlistenStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 90; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> conditionname;
};

namespace pg_query {

// Fast Binary Encoding UnlistenStmt model
class UnlistenStmtModel : public FBE::Model
{
public:
    UnlistenStmtModel() : model(this->buffer(), 4) {}
    UnlistenStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_UnlistenStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::UnlistenStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::UnlistenStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_UnlistenStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TransactionStmt field model
class FieldModel_pg_query_TransactionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_TransactionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 91; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::TransactionStmtKind> kind;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<std::pmr::string> savepoint_name;
    FieldModel<std::pmr::string> gid;
    FieldModel<bool> chain;
};

namespace pg_query {

// Fast Binary Encoding TransactionStmt model
class TransactionStmtModel : public FBE::Model
{
public:
    TransactionStmtModel() : model(this->buffer(), 4) {}
    TransactionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TransactionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TransactionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TransactionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TransactionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ViewStmt field model
class FieldModel_pg_query_ViewStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ViewStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 92; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar view;
    FieldModelVector<::pg_query::Node> aliases;
    FieldModel<::pg_query::Node> query;
    FieldModel<bool> replace;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<::pg_query::ViewCheckOption> with_check_option;
};

namespace pg_query {

// Fast Binary Encoding ViewStmt model
class ViewStmtModel : public FBE::Model
{
public:
    ViewStmtModel() : model(this->buffer(), 4) {}
    ViewStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ViewStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ViewStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ViewStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ViewStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::LoadStmt field model
class FieldModel_pg_query_LoadStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_LoadStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 93; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> filename;
};

namespace pg_query {

// Fast Binary Encoding LoadStmt model
class LoadStmtModel : public FBE::Model
{
public:
    LoadStmtModel() : model(this->buffer(), 4) {}
    LoadStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_LoadStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::LoadStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::LoadStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_LoadStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateDomainStmt field model
class FieldModel_pg_query_CreateDomainStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateDomainStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 94; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> domainname;
    FieldModelPtr_pg_query_TypeName type_name;
    FieldModelPtr_pg_query_CollateClause coll_clause;
    FieldModelVector<::pg_query::Node> constraints;
};

namespace pg_query {

// Fast Binary Encoding CreateDomainStmt model
class CreateDomainStmtModel : public FBE::Model
{
public:
    CreateDomainStmtModel() : model(this->buffer(), 4) {}
    CreateDomainStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateDomainStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateDomainStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateDomainStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateDomainStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreatedbStmt field model
class FieldModel_pg_query_CreatedbStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreatedbStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 95; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> dbname;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreatedbStmt model
class CreatedbStmtModel : public FBE::Model
{
public:
    CreatedbStmtModel() : model(this->buffer(), 4) {}
    CreatedbStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreatedbStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreatedbStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreatedbStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreatedbStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DropdbStmt field model
class FieldModel_pg_query_DropdbStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DropdbStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 96; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> dbname;
    FieldModel<bool> missing_ok;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding DropdbStmt model
class DropdbStmtModel : public FBE::Model
{
public:
    DropdbStmtModel() : model(this->buffer(), 4) {}
    DropdbStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DropdbStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DropdbStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DropdbStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DropdbStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::VacuumStmt field model
class FieldModel_pg_query_VacuumStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_VacuumStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 97; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> options;
    FieldModelVector<::pg_query::Node> rels;
    FieldModel<bool> is_vacuumcmd;
};

namespace pg_query {

// Fast Binary Encoding VacuumStmt model
class VacuumStmtModel : public FBE::Model
{
public:
    VacuumStmtModel() : model(this->buffer(), 4) {}
    VacuumStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_VacuumStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::VacuumStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::VacuumStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_VacuumStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ExplainStmt field model
class FieldModel_pg_query_ExplainStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ExplainStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 98; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> query;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding ExplainStmt model
class ExplainStmtModel : public FBE::Model
{
public:
    ExplainStmtModel() : model(this->buffer(), 4) {}
    ExplainStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ExplainStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ExplainStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ExplainStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ExplainStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateTableAsStmt field model
class FieldModel_pg_query_CreateTableAsStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateTableAsStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 99; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> query;
    FieldModelPtr_pg_query_IntoClause into;
    FieldModel<::pg_query::ObjectType> relkind;
    FieldModel<bool> is_select_into;
    FieldModel<bool> if_not_exists;
};

namespace pg_query {

// Fast Binary Encoding CreateTableAsStmt model
class CreateTableAsStmtModel : public FBE::Model
{
public:
    CreateTableAsStmtModel() : model(this->buffer(), 4) {}
    CreateTableAsStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateTableAsStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateTableAsStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateTableAsStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateTableAsStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateSeqStmt field model
class FieldModel_pg_query_CreateSeqStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateSeqStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 100; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar sequence;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<uint32_t> owner_id;
    FieldModel<bool> for_identity;
    FieldModel<bool> if_not_exists;
};

namespace pg_query {

// Fast Binary Encoding CreateSeqStmt model
class CreateSeqStmtModel : public FBE::Model
{
public:
    CreateSeqStmtModel() : model(this->buffer(), 4) {}
    CreateSeqStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateSeqStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateSeqStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateSeqStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateSeqStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterSeqStmt field model
class FieldModel_pg_query_AlterSeqStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterSeqStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 101; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar sequence;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<bool> for_identity;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding AlterSeqStmt model
class AlterSeqStmtModel : public FBE::Model
{
public:
    AlterSeqStmtModel() : model(this->buffer(), 4) {}
    AlterSeqStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterSeqStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterSeqStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterSeqStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterSeqStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::VariableSetStmt field model
class FieldModel_pg_query_VariableSetStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_VariableSetStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 102; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::VariableSetKind> kind;
    FieldModel<std::pmr::string> name;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<bool> is_local;
};

namespace pg_query {

// Fast Binary Encoding VariableSetStmt model
class VariableSetStmtModel : public FBE::Model
{
public:
    VariableSetStmtModel() : model(this->buffer(), 4) {}
    VariableSetStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_VariableSetStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::VariableSetStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::VariableSetStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_VariableSetStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::VariableShowStmt field model
class FieldModel_pg_query_VariableShowStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_VariableShowStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 103; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
};

namespace pg_query {

// Fast Binary Encoding VariableShowStmt model
class VariableShowStmtModel : public FBE::Model
{
public:
    VariableShowStmtModel() : model(this->buffer(), 4) {}
    VariableShowStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_VariableShowStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::VariableShowStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::VariableShowStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_VariableShowStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DiscardStmt field model
class FieldModel_pg_query_DiscardStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DiscardStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 104; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::DiscardMode> target;
};

namespace pg_query {

// Fast Binary Encoding DiscardStmt model
class DiscardStmtModel : public FBE::Model
{
public:
    DiscardStmtModel() : model(this->buffer(), 4) {}
    DiscardStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DiscardStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DiscardStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DiscardStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DiscardStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateTrigStmt field model
class FieldModel_pg_query_CreateTrigStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateTrigStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 105; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> trigname;
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModelVector<::pg_query::Node> funcname;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<bool> row;
    FieldModel<int32_t> timing;
    FieldModel<int32_t> events;
    FieldModelVector<::pg_query::Node> columns;
    FieldModel<::pg_query::Node> when_clause;
    FieldModel<bool> isconstraint;
    FieldModelVector<::pg_query::Node> transition_rels;
    FieldModel<bool> deferrable;
    FieldModel<bool> initdeferred;
    FieldModelPtr_pg_query_RangeVar constrrel;
};

namespace pg_query {

// Fast Binary Encoding CreateTrigStmt model
class CreateTrigStmtModel : public FBE::Model
{
public:
    CreateTrigStmtModel() : model(this->buffer(), 4) {}
    CreateTrigStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateTrigStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateTrigStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateTrigStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateTrigStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreatePLangStmt field model
class FieldModel_pg_query_CreatePLangStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreatePLangStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 106; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> replace;
    FieldModel<std::pmr::string> plname;
    FieldModelVector<::pg_query::Node> plhandler;
    FieldModelVector<::pg_query::Node> plinline;
    FieldModelVector<::pg_query::Node> plvalidator;
    FieldModel<bool> pltrusted;
};

namespace pg_query {

// Fast Binary Encoding CreatePLangStmt model
class CreatePLangStmtModel : public FBE::Model
{
public:
    CreatePLangStmtModel() : model(this->buffer(), 4) {}
    CreatePLangStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreatePLangStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreatePLangStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreatePLangStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreatePLangStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateRoleStmt field model
class FieldModel_pg_query_CreateRoleStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 107; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::RoleStmtType> stmt_type;
    FieldModel<std::pmr::string> role;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateRoleStmt model
class CreateRoleStmtModel : public FBE::Model
{
public:
    CreateRoleStmtModel() : model(this->buffer(), 4) {}
    CreateRoleStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateRoleStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateRoleStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateRoleStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateRoleStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterRoleStmt field model
class FieldModel_pg_query_AlterRoleStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 108; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RoleSpec role;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<int32_t> action;
};

namespace pg_query {

// Fast Binary Encoding AlterRoleStmt model
class AlterRoleStmtModel : public FBE::Model
{
public:
    AlterRoleStmtModel() : model(this->buffer(), 4) {}
    AlterRoleStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterRoleStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterRoleStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterRoleStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterRoleStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DropRoleStmt field model
class FieldModel_pg_query_DropRoleStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DropRoleStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 109; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> roles;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding DropRoleStmt model
class DropRoleStmtModel : public FBE::Model
{
public:
    DropRoleStmtModel() : model(this->buffer(), 4) {}
    DropRoleStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DropRoleStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DropRoleStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DropRoleStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DropRoleStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::LockStmt field model
class FieldModel_pg_query_LockStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_LockStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 110; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> relations;
    FieldModel<int32_t> mode;
    FieldModel<bool> nowait;
};

namespace pg_query {

// Fast Binary Encoding LockStmt model
class LockStmtModel : public FBE::Model
{
public:
    LockStmtModel() : model(this->buffer(), 4) {}
    LockStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_LockStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::LockStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::LockStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_LockStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ConstraintsSetStmt field model
class FieldModel_pg_query_ConstraintsSetStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ConstraintsSetStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 111; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> constraints;
    FieldModel<bool> deferred;
};

namespace pg_query {

// Fast Binary Encoding ConstraintsSetStmt model
class ConstraintsSetStmtModel : public FBE::Model
{
public:
    ConstraintsSetStmtModel() : model(this->buffer(), 4) {}
    ConstraintsSetStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ConstraintsSetStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ConstraintsSetStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ConstraintsSetStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ConstraintsSetStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ReindexStmt field model
class FieldModel_pg_query_ReindexStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ReindexStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 112; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ReindexObjectType> kind;
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<std::pmr::string> name;
    FieldModel<int32_t> options;
    FieldModel<bool> concurrent;
};

namespace pg_query {

// Fast Binary Encoding ReindexStmt model
class ReindexStmtModel : public FBE::Model
{
public:
    ReindexStmtModel() : model(this->buffer(), 4) {}
    ReindexStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ReindexStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ReindexStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ReindexStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ReindexStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CheckPointStmt field model
class FieldModel_pg_query_CheckPointStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CheckPointStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 113; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
};

namespace pg_query {

// Fast Binary Encoding CheckPointStmt model
class CheckPointStmtModel : public FBE::Model
{
public:
    CheckPointStmtModel() : model(this->buffer(), 4) {}
    CheckPointStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CheckPointStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CheckPointStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CheckPointStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CheckPointStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateSchemaStmt field model
class FieldModel_pg_query_CreateSchemaStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateSchemaStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 114; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> schemaname;
    FieldModelPtr_pg_query_RoleSpec authrole;
    FieldModelVector<::pg_query::Node> schema_elts;
    FieldModel<bool> if_not_exists;
};

namespace pg_query {

// Fast Binary Encoding CreateSchemaStmt model
class CreateSchemaStmtModel : public FBE::Model
{
public:
    CreateSchemaStmtModel() : model(this->buffer(), 4) {}
    CreateSchemaStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateSchemaStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateSchemaStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateSchemaStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateSchemaStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterDatabaseStmt field model
class FieldModel_pg_query_AlterDatabaseStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterDatabaseStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 115; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> dbname;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterDatabaseStmt model
class AlterDatabaseStmtModel : public FBE::Model
{
public:
    AlterDatabaseStmtModel() : model(this->buffer(), 4) {}
    AlterDatabaseStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterDatabaseStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterDatabaseStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterDatabaseStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterDatabaseStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterDatabaseSetStmt field model
class FieldModel_pg_query_AlterDatabaseSetStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterDatabaseSetStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 116; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> dbname;
    FieldModelPtr_pg_query_VariableSetStmt setstmt;
};

namespace pg_query {

// Fast Binary Encoding AlterDatabaseSetStmt model
class AlterDatabaseSetStmtModel : public FBE::Model
{
public:
    AlterDatabaseSetStmtModel() : model(this->buffer(), 4) {}
    AlterDatabaseSetStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterDatabaseSetStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterDatabaseSetStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterDatabaseSetStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterDatabaseSetStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterRoleSetStmt field model
class FieldModel_pg_query_AlterRoleSetStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterRoleSetStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 117; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RoleSpec role;
    FieldModel<std::pmr::string> database;
    FieldModelPtr_pg_query_VariableSetStmt setstmt;
};

namespace pg_query {

// Fast Binary Encoding AlterRoleSetStmt model
class AlterRoleSetStmtModel : public FBE::Model
{
public:
    AlterRoleSetStmtModel() : model(this->buffer(), 4) {}
    AlterRoleSetStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterRoleSetStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterRoleSetStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterRoleSetStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterRoleSetStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateConversionStmt field model
class FieldModel_pg_query_CreateConversionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateConversionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 118; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> conversion_name;
    FieldModel<std::pmr::string> for_encoding_name;
    FieldModel<std::pmr::string> to_encoding_name;
    FieldModelVector<::pg_query::Node> func_name;
    FieldModel<bool> def;
};

namespace pg_query {

// Fast Binary Encoding CreateConversionStmt model
class CreateConversionStmtModel : public FBE::Model
{
public:
    CreateConversionStmtModel() : model(this->buffer(), 4) {}
    CreateConversionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateConversionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateConversionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateConversionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateConversionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateCastStmt field model
class FieldModel_pg_query_CreateCastStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateCastStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 119; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_TypeName sourcetype;
    FieldModelPtr_pg_query_TypeName targettype;
    FieldModelPtr_pg_query_ObjectWithArgs func;
    FieldModel<::pg_query::CoercionContext> context;
    FieldModel<bool> inout;
};

namespace pg_query {

// Fast Binary Encoding CreateCastStmt model
class CreateCastStmtModel : public FBE::Model
{
public:
    CreateCastStmtModel() : model(this->buffer(), 4) {}
    CreateCastStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateCastStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateCastStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateCastStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateCastStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateOpClassStmt field model
class FieldModel_pg_query_CreateOpClassStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateOpClassStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 120; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> opclassname;
    FieldModelVector<::pg_query::Node> opfamilyname;
    FieldModel<std::pmr::string> amname;
    FieldModelPtr_pg_query_TypeName datatype;
    FieldModelVector<::pg_query::Node> items;
    FieldModel<bool> is_default;
};

namespace pg_query {

// Fast Binary Encoding CreateOpClassStmt model
class CreateOpClassStmtModel : public FBE::Model
{
public:
    CreateOpClassStmtModel() : model(this->buffer(), 4) {}
    CreateOpClassStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateOpClassStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateOpClassStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateOpClassStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateOpClassStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateOpFamilyStmt field model
class FieldModel_pg_query_CreateOpFamilyStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateOpFamilyStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 121; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> opfamilyname;
    FieldModel<std::pmr::string> amname;
};

namespace pg_query {

// Fast Binary Encoding CreateOpFamilyStmt model
class CreateOpFamilyStmtModel : public FBE::Model
{
public:
    CreateOpFamilyStmtModel() : model(this->buffer(), 4) {}
    CreateOpFamilyStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateOpFamilyStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateOpFamilyStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateOpFamilyStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateOpFamilyStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterOpFamilyStmt field model
class FieldModel_pg_query_AlterOpFamilyStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterOpFamilyStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 122; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> opfamilyname;
    FieldModel<std::pmr::string> amname;
    FieldModel<bool> is_drop;
    FieldModelVector<::pg_query::Node> items;
};

namespace pg_query {

// Fast Binary Encoding AlterOpFamilyStmt model
class AlterOpFamilyStmtModel : public FBE::Model
{
public:
    AlterOpFamilyStmtModel() : model(this->buffer(), 4) {}
    AlterOpFamilyStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterOpFamilyStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterOpFamilyStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterOpFamilyStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterOpFamilyStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::PrepareStmt field model
class FieldModel_pg_query_PrepareStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_PrepareStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 123; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModelVector<::pg_query::Node> argtypes;
    FieldModel<::pg_query::Node> query;
};

namespace pg_query {

// Fast Binary Encoding PrepareStmt model
class PrepareStmtModel : public FBE::Model
{
public:
    PrepareStmtModel() : model(this->buffer(), 4) {}
    PrepareStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_PrepareStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::PrepareStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::PrepareStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_PrepareStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ExecuteStmt field model
class FieldModel_pg_query_ExecuteStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ExecuteStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 124; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModelVector<::pg_query::Node> params;
};

namespace pg_query {

// Fast Binary Encoding ExecuteStmt model
class ExecuteStmtModel : public FBE::Model
{
public:
    ExecuteStmtModel() : model(this->buffer(), 4) {}
    ExecuteStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ExecuteStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ExecuteStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ExecuteStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ExecuteStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DeallocateStmt field model
class FieldModel_pg_query_DeallocateStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DeallocateStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 125; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
};

namespace pg_query {

// Fast Binary Encoding DeallocateStmt model
class DeallocateStmtModel : public FBE::Model
{
public:
    DeallocateStmtModel() : model(this->buffer(), 4) {}
    DeallocateStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DeallocateStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DeallocateStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DeallocateStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DeallocateStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DeclareCursorStmt field model
class FieldModel_pg_query_DeclareCursorStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DeclareCursorStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 126; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> portalname;
    FieldModel<int32_t> options;
    FieldModel<::pg_query::Node> query;
};

namespace pg_query {

// Fast Binary Encoding DeclareCursorStmt model
class DeclareCursorStmtModel : public FBE::Model
{
public:
    DeclareCursorStmtModel() : model(this->buffer(), 4) {}
    DeclareCursorStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DeclareCursorStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DeclareCursorStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DeclareCursorStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DeclareCursorStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateTableSpaceStmt field model
class FieldModel_pg_query_CreateTableSpaceStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateTableSpaceStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 127; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> tablespacename;
    FieldModelPtr_pg_query_RoleSpec owner;
    FieldModel<std::pmr::string> location;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateTableSpaceStmt model
class CreateTableSpaceStmtModel : public FBE::Model
{
public:
    CreateTableSpaceStmtModel() : model(this->buffer(), 4) {}
    CreateTableSpaceStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateTableSpaceStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateTableSpaceStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateTableSpaceStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateTableSpaceStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DropTableSpaceStmt field model
class FieldModel_pg_query_DropTableSpaceStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DropTableSpaceStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 128; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> tablespacename;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding DropTableSpaceStmt model
class DropTableSpaceStmtModel : public FBE::Model
{
public:
    DropTableSpaceStmtModel() : model(this->buffer(), 4) {}
    DropTableSpaceStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DropTableSpaceStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DropTableSpaceStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DropTableSpaceStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DropTableSpaceStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterObjectDependsStmt field model
class FieldModel_pg_query_AlterObjectDependsStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterObjectDependsStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 129; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> object_type;
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<::pg_query::Node> object;
    FieldModel<::pg_query::Node> extname;
    FieldModel<bool> remove;
};

namespace pg_query {

// Fast Binary Encoding AlterObjectDependsStmt model
class AlterObjectDependsStmtModel : public FBE::Model
{
public:
    AlterObjectDependsStmtModel() : model(this->buffer(), 4) {}
    AlterObjectDependsStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterObjectDependsStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterObjectDependsStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterObjectDependsStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterObjectDependsStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterObjectSchemaStmt field model
class FieldModel_pg_query_AlterObjectSchemaStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterObjectSchemaStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 130; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> object_type;
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<::pg_query::Node> object;
    FieldModel<std::pmr::string> newschema;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding AlterObjectSchemaStmt model
class AlterObjectSchemaStmtModel : public FBE::Model
{
public:
    AlterObjectSchemaStmtModel() : model(this->buffer(), 4) {}
    AlterObjectSchemaStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterObjectSchemaStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterObjectSchemaStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterObjectSchemaStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterObjectSchemaStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterOwnerStmt field model
class FieldModel_pg_query_AlterOwnerStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterOwnerStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 131; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> object_type;
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<::pg_query::Node> object;
    FieldModelPtr_pg_query_RoleSpec newowner;
};

namespace pg_query {

// Fast Binary Encoding AlterOwnerStmt model
class AlterOwnerStmtModel : public FBE::Model
{
public:
    AlterOwnerStmtModel() : model(this->buffer(), 4) {}
    AlterOwnerStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterOwnerStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterOwnerStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterOwnerStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterOwnerStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterOperatorStmt field model
class FieldModel_pg_query_AlterOperatorStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterOperatorStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 132; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_ObjectWithArgs opername;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterOperatorStmt model
class AlterOperatorStmtModel : public FBE::Model
{
public:
    AlterOperatorStmtModel() : model(this->buffer(), 4) {}
    AlterOperatorStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterOperatorStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterOperatorStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterOperatorStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterOperatorStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterTypeStmt field model
class FieldModel_pg_query_AlterTypeStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterTypeStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 133; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> type_name;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterTypeStmt model
class AlterTypeStmtModel : public FBE::Model
{
public:
    AlterTypeStmtModel() : model(this->buffer(), 4) {}
    AlterTypeStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterTypeStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterTypeStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterTypeStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterTypeStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DropOwnedStmt field model
class FieldModel_pg_query_DropOwnedStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DropOwnedStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 134; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> roles;
    FieldModel<::pg_query::DropBehavior> behavior;
};

namespace pg_query {

// Fast Binary Encoding DropOwnedStmt model
class DropOwnedStmtModel : public FBE::Model
{
public:
    DropOwnedStmtModel() : model(this->buffer(), 4) {}
    DropOwnedStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DropOwnedStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DropOwnedStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DropOwnedStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DropOwnedStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ReassignOwnedStmt field model
class FieldModel_pg_query_ReassignOwnedStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ReassignOwnedStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 135; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> roles;
    FieldModelPtr_pg_query_RoleSpec newrole;
};

namespace pg_query {

// Fast Binary Encoding ReassignOwnedStmt model
class ReassignOwnedStmtModel : public FBE::Model
{
public:
    ReassignOwnedStmtModel() : model(this->buffer(), 4) {}
    ReassignOwnedStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ReassignOwnedStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ReassignOwnedStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ReassignOwnedStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ReassignOwnedStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CompositeTypeStmt field model
class FieldModel_pg_query_CompositeTypeStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CompositeTypeStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 136; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar typevar;
    FieldModelVector<::pg_query::Node> coldeflist;
};

namespace pg_query {

// Fast Binary Encoding CompositeTypeStmt model
class CompositeTypeStmtModel : public FBE::Model
{
public:
    CompositeTypeStmtModel() : model(this->buffer(), 4) {}
    CompositeTypeStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CompositeTypeStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CompositeTypeStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CompositeTypeStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CompositeTypeStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateEnumStmt field model
class FieldModel_pg_query_CreateEnumStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateEnumStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 137; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> type_name;
    FieldModelVector<::pg_query::Node> vals;
};

namespace pg_query {

// Fast Binary Encoding CreateEnumStmt model
class CreateEnumStmtModel : public FBE::Model
{
public:
    CreateEnumStmtModel() : model(this->buffer(), 4) {}
    CreateEnumStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateEnumStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateEnumStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateEnumStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateEnumStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateRangeStmt field model
class FieldModel_pg_query_CreateRangeStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateRangeStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 138; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> type_name;
    FieldModelVector<::pg_query::Node> params;
};

namespace pg_query {

// Fast Binary Encoding CreateRangeStmt model
class CreateRangeStmtModel : public FBE::Model
{
public:
    CreateRangeStmtModel() : model(this->buffer(), 4) {}
    CreateRangeStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateRangeStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateRangeStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateRangeStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateRangeStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterEnumStmt field model
class FieldModel_pg_query_AlterEnumStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterEnumStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 139; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> type_name;
    FieldModel<std::pmr::string> old_val;
    FieldModel<std::pmr::string> new_val;
    FieldModel<std::pmr::string> new_val_neighbor;
    FieldModel<bool> new_val_is_after;
    FieldModel<bool> skip_if_new_val_exists;
};

namespace pg_query {

// Fast Binary Encoding AlterEnumStmt model
class AlterEnumStmtModel : public FBE::Model
{
public:
    AlterEnumStmtModel() : model(this->buffer(), 4) {}
    AlterEnumStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterEnumStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterEnumStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterEnumStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterEnumStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterTSDictionaryStmt field model
class FieldModel_pg_query_AlterTSDictionaryStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterTSDictionaryStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 140; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> dictname;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterTSDictionaryStmt model
class AlterTSDictionaryStmtModel : public FBE::Model
{
public:
    AlterTSDictionaryStmtModel() : model(this->buffer(), 4) {}
    AlterTSDictionaryStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterTSDictionaryStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterTSDictionaryStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterTSDictionaryStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterTSDictionaryStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterTSConfigurationStmt field model
class FieldModel_pg_query_AlterTSConfigurationStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterTSConfigurationStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 141; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::AlterTSConfigType> kind;
    FieldModelVector<::pg_query::Node> cfgname;
    FieldModelVector<::pg_query::Node> tokentype;
    FieldModelVector<::pg_query::Node> dicts;
    FieldModel<bool> override;
    FieldModel<bool> replace;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding AlterTSConfigurationStmt model
class AlterTSConfigurationStmtModel : public FBE::Model
{
public:
    AlterTSConfigurationStmtModel() : model(this->buffer(), 4) {}
    AlterTSConfigurationStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterTSConfigurationStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterTSConfigurationStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterTSConfigurationStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterTSConfigurationStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateFdwStmt field model
class FieldModel_pg_query_CreateFdwStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateFdwStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 142; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> fdwname;
    FieldModelVector<::pg_query::Node> func_options;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateFdwStmt model
class CreateFdwStmtModel : public FBE::Model
{
public:
    CreateFdwStmtModel() : model(this->buffer(), 4) {}
    CreateFdwStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateFdwStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateFdwStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateFdwStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateFdwStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterFdwStmt field model
class FieldModel_pg_query_AlterFdwStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterFdwStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 143; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> fdwname;
    FieldModelVector<::pg_query::Node> func_options;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterFdwStmt model
class AlterFdwStmtModel : public FBE::Model
{
public:
    AlterFdwStmtModel() : model(this->buffer(), 4) {}
    AlterFdwStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterFdwStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterFdwStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterFdwStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterFdwStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateForeignServerStmt field model
class FieldModel_pg_query_CreateForeignServerStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateForeignServerStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 144; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> servername;
    FieldModel<std::pmr::string> servertype;
    FieldModel<std::pmr::string> version;
    FieldModel<std::pmr::string> fdwname;
    FieldModel<bool> if_not_exists;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateForeignServerStmt model
class CreateForeignServerStmtModel : public FBE::Model
{
public:
    CreateForeignServerStmtModel() : model(this->buffer(), 4) {}
    CreateForeignServerStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateForeignServerStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateForeignServerStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateForeignServerStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateForeignServerStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterForeignServerStmt field model
class FieldModel_pg_query_AlterForeignServerStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterForeignServerStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 145; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> servername;
    FieldModel<std::pmr::string> version;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<bool> has_version;
};

namespace pg_query {

// Fast Binary Encoding AlterForeignServerStmt model
class AlterForeignServerStmtModel : public FBE::Model
{
public:
    AlterForeignServerStmtModel() : model(this->buffer(), 4) {}
    AlterForeignServerStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterForeignServerStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterForeignServerStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterForeignServerStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterForeignServerStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateUserMappingStmt field model
class FieldModel_pg_query_CreateUserMappingStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateUserMappingStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 146; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RoleSpec user;
    FieldModel<std::pmr::string> servername;
    FieldModel<bool> if_not_exists;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateUserMappingStmt model
class CreateUserMappingStmtModel : public FBE::Model
{
public:
    CreateUserMappingStmtModel() : model(this->buffer(), 4) {}
    CreateUserMappingStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateUserMappingStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateUserMappingStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateUserMappingStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateUserMappingStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterUserMappingStmt field model
class FieldModel_pg_query_AlterUserMappingStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterUserMappingStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 147; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RoleSpec user;
    FieldModel<std::pmr::string> servername;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterUserMappingStmt model
class AlterUserMappingStmtModel : public FBE::Model
{
public:
    AlterUserMappingStmtModel() : model(this->buffer(), 4) {}
    AlterUserMappingStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterUserMappingStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterUserMappingStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterUserMappingStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterUserMappingStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DropUserMappingStmt field model
class FieldModel_pg_query_DropUserMappingStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DropUserMappingStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 148; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RoleSpec user;
    FieldModel<std::pmr::string> servername;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding DropUserMappingStmt model
class DropUserMappingStmtModel : public FBE::Model
{
public:
    DropUserMappingStmtModel() : model(this->buffer(), 4) {}
    DropUserMappingStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DropUserMappingStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DropUserMappingStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DropUserMappingStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DropUserMappingStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterTableSpaceOptionsStmt field model
class FieldModel_pg_query_AlterTableSpaceOptionsStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterTableSpaceOptionsStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 149; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> tablespacename;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<bool> is_reset;
};

namespace pg_query {

// Fast Binary Encoding AlterTableSpaceOptionsStmt model
class AlterTableSpaceOptionsStmtModel : public FBE::Model
{
public:
    AlterTableSpaceOptionsStmtModel() : model(this->buffer(), 4) {}
    AlterTableSpaceOptionsStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterTableSpaceOptionsStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterTableSpaceOptionsStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterTableSpaceOptionsStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterTableSpaceOptionsStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterTableMoveAllStmt field model
class FieldModel_pg_query_AlterTableMoveAllStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterTableMoveAllStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 150; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> orig_tablespacename;
    FieldModel<::pg_query::ObjectType> objtype;
    FieldModelVector<::pg_query::Node> roles;
    FieldModel<std::pmr::string> new_tablespacename;
    FieldModel<bool> nowait;
};

namespace pg_query {

// Fast Binary Encoding AlterTableMoveAllStmt model
class AlterTableMoveAllStmtModel : public FBE::Model
{
public:
    AlterTableMoveAllStmtModel() : model(this->buffer(), 4) {}
    AlterTableMoveAllStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterTableMoveAllStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterTableMoveAllStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterTableMoveAllStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterTableMoveAllStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SecLabelStmt field model
class FieldModel_pg_query_SecLabelStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_SecLabelStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 151; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ObjectType> objtype;
    FieldModel<::pg_query::Node> object;
    FieldModel<std::pmr::string> provider;
    FieldModel<std::pmr::string> label;
};

namespace pg_query {

// Fast Binary Encoding SecLabelStmt model
class SecLabelStmtModel : public FBE::Model
{
public:
    SecLabelStmtModel() : model(this->buffer(), 4) {}
    SecLabelStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SecLabelStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SecLabelStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SecLabelStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SecLabelStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateForeignTableStmt field model
class FieldModel_pg_query_CreateForeignTableStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateForeignTableStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 152; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel_pg_query_CreateStmt base_stmt;
    FieldModel<std::pmr::string> servername;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateForeignTableStmt model
class CreateForeignTableStmtModel : public FBE::Model
{
public:
    CreateForeignTableStmtModel() : model(this->buffer(), 4) {}
    CreateForeignTableStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateForeignTableStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateForeignTableStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateForeignTableStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateForeignTableStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ImportForeignSchemaStmt field model
class FieldModel_pg_query_ImportForeignSchemaStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ImportForeignSchemaStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 153; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> server_name;
    FieldModel<std::pmr::string> remote_schema;
    FieldModel<std::pmr::string> local_schema;
    FieldModel<::pg_query::ImportForeignSchemaType> list_type;
    FieldModelVector<::pg_query::Node> table_list;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding ImportForeignSchemaStmt model
class ImportForeignSchemaStmtModel : public FBE::Model
{
public:
    ImportForeignSchemaStmtModel() : model(this->buffer(), 4) {}
    ImportForeignSchemaStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ImportForeignSchemaStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ImportForeignSchemaStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ImportForeignSchemaStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ImportForeignSchemaStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateExtensionStmt field model
class FieldModel_pg_query_CreateExtensionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateExtensionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 154; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> extname;
    FieldModel<bool> if_not_exists;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateExtensionStmt model
class CreateExtensionStmtModel : public FBE::Model
{
public:
    CreateExtensionStmtModel() : model(this->buffer(), 4) {}
    CreateExtensionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateExtensionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateExtensionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateExtensionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateExtensionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterExtensionStmt field model
class FieldModel_pg_query_AlterExtensionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterExtensionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 155; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> extname;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterExtensionStmt model
class AlterExtensionStmtModel : public FBE::Model
{
public:
    AlterExtensionStmtModel() : model(this->buffer(), 4) {}
    AlterExtensionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterExtensionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterExtensionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterExtensionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterExtensionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterExtensionContentsStmt field model
class FieldModel_pg_query_AlterExtensionContentsStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterExtensionContentsStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 156; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> extname;
    FieldModel<int32_t> action;
    FieldModel<::pg_query::ObjectType> objtype;
    FieldModel<::pg_query::Node> object;
};

namespace pg_query {

// Fast Binary Encoding AlterExtensionContentsStmt model
class AlterExtensionContentsStmtModel : public FBE::Model
{
public:
    AlterExtensionContentsStmtModel() : model(this->buffer(), 4) {}
    AlterExtensionContentsStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterExtensionContentsStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterExtensionContentsStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterExtensionContentsStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterExtensionContentsStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateEventTrigStmt field model
class FieldModel_pg_query_CreateEventTrigStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateEventTrigStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 157; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> trigname;
    FieldModel<std::pmr::string> eventname;
    FieldModelVector<::pg_query::Node> whenclause;
    FieldModelVector<::pg_query::Node> funcname;
};

namespace pg_query {

// Fast Binary Encoding CreateEventTrigStmt model
class CreateEventTrigStmtModel : public FBE::Model
{
public:
    CreateEventTrigStmtModel() : model(this->buffer(), 4) {}
    CreateEventTrigStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateEventTrigStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateEventTrigStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateEventTrigStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateEventTrigStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterEventTrigStmt field model
class FieldModel_pg_query_AlterEventTrigStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterEventTrigStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 158; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> trigname;
    FieldModel<std::pmr::string> tgenabled;
};

namespace pg_query {

// Fast Binary Encoding AlterEventTrigStmt model
class AlterEventTrigStmtModel : public FBE::Model
{
public:
    AlterEventTrigStmtModel() : model(this->buffer(), 4) {}
    AlterEventTrigStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterEventTrigStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterEventTrigStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterEventTrigStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterEventTrigStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RefreshMatViewStmt field model
class FieldModel_pg_query_RefreshMatViewStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_RefreshMatViewStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 159; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> concurrent;
    FieldModel<bool> skip_data;
    FieldModelPtr_pg_query_RangeVar relation;
};

namespace pg_query {

// Fast Binary Encoding RefreshMatViewStmt model
class RefreshMatViewStmtModel : public FBE::Model
{
public:
    RefreshMatViewStmtModel() : model(this->buffer(), 4) {}
    RefreshMatViewStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RefreshMatViewStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RefreshMatViewStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RefreshMatViewStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RefreshMatViewStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ReplicaIdentityStmt field model
class FieldModel_pg_query_ReplicaIdentityStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_ReplicaIdentityStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 160; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> identity_type;
    FieldModel<std::pmr::string> name;
};

namespace pg_query {

// Fast Binary Encoding ReplicaIdentityStmt model
class ReplicaIdentityStmtModel : public FBE::Model
{
public:
    ReplicaIdentityStmtModel() : model(this->buffer(), 4) {}
    ReplicaIdentityStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ReplicaIdentityStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ReplicaIdentityStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ReplicaIdentityStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ReplicaIdentityStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterSystemStmt field model
class FieldModel_pg_query_AlterSystemStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterSystemStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 161; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_VariableSetStmt setstmt;
};

namespace pg_query {

// Fast Binary Encoding AlterSystemStmt model
class AlterSystemStmtModel : public FBE::Model
{
public:
    AlterSystemStmtModel() : model(this->buffer(), 4) {}
    AlterSystemStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterSystemStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterSystemStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterSystemStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterSystemStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreatePolicyStmt field model
class FieldModel_pg_query_CreatePolicyStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreatePolicyStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 162; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> policy_name;
    FieldModelPtr_pg_query_RangeVar table;
    FieldModel<std::pmr::string> cmd_name;
    FieldModel<bool> permissive;
    FieldModelVector<::pg_query::Node> roles;
    FieldModel<::pg_query::Node> qual;
    FieldModel<::pg_query::Node> with_check;
};

namespace pg_query {

// Fast Binary Encoding CreatePolicyStmt model
class CreatePolicyStmtModel : public FBE::Model
{
public:
    CreatePolicyStmtModel() : model(this->buffer(), 4) {}
    CreatePolicyStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreatePolicyStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreatePolicyStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreatePolicyStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreatePolicyStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterPolicyStmt field model
class FieldModel_pg_query_AlterPolicyStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterPolicyStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 163; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> policy_name;
    FieldModelPtr_pg_query_RangeVar table;
    FieldModelVector<::pg_query::Node> roles;
    FieldModel<::pg_query::Node> qual;
    FieldModel<::pg_query::Node> with_check;
};

namespace pg_query {

// Fast Binary Encoding AlterPolicyStmt model
class AlterPolicyStmtModel : public FBE::Model
{
public:
    AlterPolicyStmtModel() : model(this->buffer(), 4) {}
    AlterPolicyStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterPolicyStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterPolicyStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterPolicyStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterPolicyStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateTransformStmt field model
class FieldModel_pg_query_CreateTransformStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateTransformStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 164; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> replace;
    FieldModelPtr_pg_query_TypeName type_name;
    FieldModel<std::pmr::string> lang;
    FieldModelPtr_pg_query_ObjectWithArgs fromsql;
    FieldModelPtr_pg_query_ObjectWithArgs tosql;
};

namespace pg_query {

// Fast Binary Encoding CreateTransformStmt model
class CreateTransformStmtModel : public FBE::Model
{
public:
    CreateTransformStmtModel() : model(this->buffer(), 4) {}
    CreateTransformStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateTransformStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateTransformStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateTransformStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateTransformStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateAmStmt field model
class FieldModel_pg_query_CreateAmStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateAmStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 165; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> amname;
    FieldModelVector<::pg_query::Node> handler_name;
    FieldModel<std::pmr::string> amtype;
};

namespace pg_query {

// Fast Binary Encoding CreateAmStmt model
class CreateAmStmtModel : public FBE::Model
{
public:
    CreateAmStmtModel() : model(this->buffer(), 4) {}
    CreateAmStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateAmStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateAmStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateAmStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateAmStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreatePublicationStmt field model
class FieldModel_pg_query_CreatePublicationStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreatePublicationStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 166; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> pubname;
    FieldModelVector<::pg_query::Node> options;
    FieldModelVector<::pg_query::Node> tables;
    FieldModel<bool> for_all_tables;
};

namespace pg_query {

// Fast Binary Encoding CreatePublicationStmt model
class CreatePublicationStmtModel : public FBE::Model
{
public:
    CreatePublicationStmtModel() : model(this->buffer(), 4) {}
    CreatePublicationStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreatePublicationStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreatePublicationStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreatePublicationStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreatePublicationStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterPublicationStmt field model
class FieldModel_pg_query_AlterPublicationStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterPublicationStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 167; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> pubname;
    FieldModelVector<::pg_query::Node> options;
    FieldModelVector<::pg_query::Node> tables;
    FieldModel<bool> for_all_tables;
    FieldModel<::pg_query::DefElemAction> table_action;
};

namespace pg_query {

// Fast Binary Encoding AlterPublicationStmt model
class AlterPublicationStmtModel : public FBE::Model
{
public:
    AlterPublicationStmtModel() : model(this->buffer(), 4) {}
    AlterPublicationStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterPublicationStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterPublicationStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterPublicationStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterPublicationStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateSubscriptionStmt field model
class FieldModel_pg_query_CreateSubscriptionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateSubscriptionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 168; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> subname;
    FieldModel<std::pmr::string> conninfo;
    FieldModelVector<::pg_query::Node> publication;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding CreateSubscriptionStmt model
class CreateSubscriptionStmtModel : public FBE::Model
{
public:
    CreateSubscriptionStmtModel() : model(this->buffer(), 4) {}
    CreateSubscriptionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateSubscriptionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateSubscriptionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateSubscriptionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateSubscriptionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterSubscriptionStmt field model
class FieldModel_pg_query_AlterSubscriptionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterSubscriptionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 169; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::AlterSubscriptionType> kind;
    FieldModel<std::pmr::string> subname;
    FieldModel<std::pmr::string> conninfo;
    FieldModelVector<::pg_query::Node> publication;
    FieldModelVector<::pg_query::Node> options;
};

namespace pg_query {

// Fast Binary Encoding AlterSubscriptionStmt model
class AlterSubscriptionStmtModel : public FBE::Model
{
public:
    AlterSubscriptionStmtModel() : model(this->buffer(), 4) {}
    AlterSubscriptionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterSubscriptionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterSubscriptionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterSubscriptionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterSubscriptionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DropSubscriptionStmt field model
class FieldModel_pg_query_DropSubscriptionStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_DropSubscriptionStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 170; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> subname;
    FieldModel<bool> missing_ok;
    FieldModel<::pg_query::DropBehavior> behavior;
};

namespace pg_query {

// Fast Binary Encoding DropSubscriptionStmt model
class DropSubscriptionStmtModel : public FBE::Model
{
public:
    DropSubscriptionStmtModel() : model(this->buffer(), 4) {}
    DropSubscriptionStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DropSubscriptionStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DropSubscriptionStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DropSubscriptionStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DropSubscriptionStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateStatsStmt field model
class FieldModel_pg_query_CreateStatsStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateStatsStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 171; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> defnames;
    FieldModelVector<::pg_query::Node> stat_types;
    FieldModelVector<::pg_query::Node> exprs;
    FieldModelVector<::pg_query::Node> relations;
    FieldModel<std::pmr::string> stxcomment;
    FieldModel<bool> if_not_exists;
};

namespace pg_query {

// Fast Binary Encoding CreateStatsStmt model
class CreateStatsStmtModel : public FBE::Model
{
public:
    CreateStatsStmtModel() : model(this->buffer(), 4) {}
    CreateStatsStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateStatsStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateStatsStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateStatsStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateStatsStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterCollationStmt field model
class FieldModel_pg_query_AlterCollationStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterCollationStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 172; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> collname;
};

namespace pg_query {

// Fast Binary Encoding AlterCollationStmt model
class AlterCollationStmtModel : public FBE::Model
{
public:
    AlterCollationStmtModel() : model(this->buffer(), 4) {}
    AlterCollationStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterCollationStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterCollationStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterCollationStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterCollationStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CallStmt field model
class FieldModel_pg_query_CallStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_CallStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 173; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_FuncCall funccall;
    FieldModelPtr_pg_query_FuncExpr funcexpr;
};

namespace pg_query {

// Fast Binary Encoding CallStmt model
class CallStmtModel : public FBE::Model
{
public:
    CallStmtModel() : model(this->buffer(), 4) {}
    CallStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CallStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CallStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CallStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CallStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AlterStatsStmt field model
class FieldModel_pg_query_AlterStatsStmt : public BaseFieldModel
{
public:
    FieldModel_pg_query_AlterStatsStmt(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 174; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> defnames;
    FieldModel<int32_t> stxstattarget;
    FieldModel<bool> missing_ok;
};

namespace pg_query {

// Fast Binary Encoding AlterStatsStmt model
class AlterStatsStmtModel : public FBE::Model
{
public:
    AlterStatsStmtModel() : model(this->buffer(), 4) {}
    AlterStatsStmtModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AlterStatsStmt::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AlterStatsStmt& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AlterStatsStmt& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AlterStatsStmt model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::A_Expr field model
class FieldModel_pg_query_A_Expr : public BaseFieldModel
{
public:
    FieldModel_pg_query_A_Expr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 175; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::A_Expr_Kind> kind;
    FieldModelVector<::pg_query::Node> name;
    FieldModel<::pg_query::Node> lexpr;
    FieldModel<::pg_query::Node> rexpr;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding A_Expr model
class A_ExprModel : public FBE::Model
{
public:
    A_ExprModel() : model(this->buffer(), 4) {}
    A_ExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_A_Expr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::A_Expr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::A_Expr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_A_Expr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ColumnRef field model
class FieldModel_pg_query_ColumnRef : public BaseFieldModel
{
public:
    FieldModel_pg_query_ColumnRef(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 176; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> fields;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ColumnRef model
class ColumnRefModel : public FBE::Model
{
public:
    ColumnRefModel() : model(this->buffer(), 4) {}
    ColumnRefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ColumnRef::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ColumnRef& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ColumnRef& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ColumnRef model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ParamRef field model
class FieldModel_pg_query_ParamRef : public BaseFieldModel
{
public:
    FieldModel_pg_query_ParamRef(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 177; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<int32_t> number;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ParamRef model
class ParamRefModel : public FBE::Model
{
public:
    ParamRefModel() : model(this->buffer(), 4) {}
    ParamRefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ParamRef::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ParamRef& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ParamRef& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ParamRef model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::A_Const field model
class FieldModel_pg_query_A_Const : public BaseFieldModel
{
public:
    FieldModel_pg_query_A_Const(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 178; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> val;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding A_Const model
class A_ConstModel : public FBE::Model
{
public:
    A_ConstModel() : model(this->buffer(), 4) {}
    A_ConstModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_A_Const::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::A_Const& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::A_Const& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_A_Const model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::FuncCall field model
class FieldModel_pg_query_FuncCall : public BaseFieldModel
{
public:
    FieldModel_pg_query_FuncCall(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 179; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> funcname;
    FieldModelVector<::pg_query::Node> args;
    FieldModelVector<::pg_query::Node> agg_order;
    FieldModel<::pg_query::Node> agg_filter;
    FieldModel<bool> agg_within_group;
    FieldModel<bool> agg_star;
    FieldModel<bool> agg_distinct;
    FieldModel<bool> func_variadic;
    FieldModelPtr_pg_query_WindowDef over;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding FuncCall model
class FuncCallModel : public FBE::Model
{
public:
    FuncCallModel() : model(this->buffer(), 4) {}
    FuncCallModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_FuncCall::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::FuncCall& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::FuncCall& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_FuncCall model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::A_Star field model
class FieldModel_pg_query_A_Star : public BaseFieldModel
{
public:
    FieldModel_pg_query_A_Star(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 180; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
};

namespace pg_query {

// Fast Binary Encoding A_Star model
class A_StarModel : public FBE::Model
{
public:
    A_StarModel() : model(this->buffer(), 4) {}
    A_StarModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_A_Star::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::A_Star& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::A_Star& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_A_Star model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::A_Indices field model
class FieldModel_pg_query_A_Indices : public BaseFieldModel
{
public:
    FieldModel_pg_query_A_Indices(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 181; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> is_slice;
    FieldModel<::pg_query::Node> lidx;
    FieldModel<::pg_query::Node> uidx;
};

namespace pg_query {

// Fast Binary Encoding A_Indices model
class A_IndicesModel : public FBE::Model
{
public:
    A_IndicesModel() : model(this->buffer(), 4) {}
    A_IndicesModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_A_Indices::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::A_Indices& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::A_Indices& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_A_Indices model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::A_Indirection field model
class FieldModel_pg_query_A_Indirection : public BaseFieldModel
{
public:
    FieldModel_pg_query_A_Indirection(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 182; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> arg;
    FieldModelVector<::pg_query::Node> indirection;
};

namespace pg_query {

// Fast Binary Encoding A_Indirection model
class A_IndirectionModel : public FBE::Model
{
public:
    A_IndirectionModel() : model(this->buffer(), 4) {}
    A_IndirectionModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_A_Indirection::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::A_Indirection& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::A_Indirection& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_A_Indirection model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::A_ArrayExpr field model
class FieldModel_pg_query_A_ArrayExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_A_ArrayExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 183; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> elements;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding A_ArrayExpr model
class A_ArrayExprModel : public FBE::Model
{
public:
    A_ArrayExprModel() : model(this->buffer(), 4) {}
    A_ArrayExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_A_ArrayExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::A_ArrayExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::A_ArrayExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_A_ArrayExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ResTarget field model
class FieldModel_pg_query_ResTarget : public BaseFieldModel
{
public:
    FieldModel_pg_query_ResTarget(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 184; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModelVector<::pg_query::Node> indirection;
    FieldModel<::pg_query::Node> val;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ResTarget model
class ResTargetModel : public FBE::Model
{
public:
    ResTargetModel() : model(this->buffer(), 4) {}
    ResTargetModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ResTarget::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ResTarget& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ResTarget& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ResTarget model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::MultiAssignRef field model
class FieldModel_pg_query_MultiAssignRef : public BaseFieldModel
{
public:
    FieldModel_pg_query_MultiAssignRef(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 185; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> source;
    FieldModel<int32_t> colno;
    FieldModel<int32_t> ncolumns;
};

namespace pg_query {

// Fast Binary Encoding MultiAssignRef model
class MultiAssignRefModel : public FBE::Model
{
public:
    MultiAssignRefModel() : model(this->buffer(), 4) {}
    MultiAssignRefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_MultiAssignRef::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::MultiAssignRef& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::MultiAssignRef& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_MultiAssignRef model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TypeCast field model
class FieldModel_pg_query_TypeCast : public BaseFieldModel
{
public:
    FieldModel_pg_query_TypeCast(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 186; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> arg;
    FieldModelPtr_pg_query_TypeName type_name;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding TypeCast model
class TypeCastModel : public FBE::Model
{
public:
    TypeCastModel() : model(this->buffer(), 4) {}
    TypeCastModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TypeCast::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TypeCast& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TypeCast& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TypeCast model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CollateClause field model
class FieldModel_pg_query_CollateClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_CollateClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 187; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> arg;
    FieldModelVector<::pg_query::Node> collname;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding CollateClause model
class CollateClauseModel : public FBE::Model
{
public:
    CollateClauseModel() : model(this->buffer(), 4) {}
    CollateClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CollateClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CollateClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CollateClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CollateClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SortBy field model
class FieldModel_pg_query_SortBy : public BaseFieldModel
{
public:
    FieldModel_pg_query_SortBy(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 188; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> node;
    FieldModel<::pg_query::SortByDir> sortby_dir;
    FieldModel<::pg_query::SortByNulls> sortby_nulls;
    FieldModelVector<::pg_query::Node> use_op;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding SortBy model
class SortByModel : public FBE::Model
{
public:
    SortByModel() : model(this->buffer(), 4) {}
    SortByModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SortBy::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SortBy& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SortBy& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SortBy model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::WindowDef field model
class FieldModel_pg_query_WindowDef : public BaseFieldModel
{
public:
    FieldModel_pg_query_WindowDef(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 189; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModel<std::pmr::string> refname;
    FieldModelVector<::pg_query::Node> partition_clause;
    FieldModelVector<::pg_query::Node> order_clause;
    FieldModel<int32_t> frame_options;
    FieldModel<::pg_query::Node> start_offset;
    FieldModel<::pg_query::Node> end_offset;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding WindowDef model
class WindowDefModel : public FBE::Model
{
public:
    WindowDefModel() : model(this->buffer(), 4) {}
    WindowDefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_WindowDef::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::WindowDef& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::WindowDef& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_WindowDef model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeSubselect field model
class FieldModel_pg_query_RangeSubselect : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeSubselect(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 190; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> lateral;
    FieldModel<::pg_query::Node> subquery;
    FieldModelPtr_pg_query_Alias alias;
};

namespace pg_query {

// Fast Binary Encoding RangeSubselect model
class RangeSubselectModel : public FBE::Model
{
public:
    RangeSubselectModel() : model(this->buffer(), 4) {}
    RangeSubselectModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeSubselect::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeSubselect& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeSubselect& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeSubselect model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeFunction field model
class FieldModel_pg_query_RangeFunction : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeFunction(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 191; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> lateral;
    FieldModel<bool> ordinality;
    FieldModel<bool> is_rowsfrom;
    FieldModelVector<::pg_query::Node> functions;
    FieldModelPtr_pg_query_Alias alias;
    FieldModelVector<::pg_query::Node> coldeflist;
};

namespace pg_query {

// Fast Binary Encoding RangeFunction model
class RangeFunctionModel : public FBE::Model
{
public:
    RangeFunctionModel() : model(this->buffer(), 4) {}
    RangeFunctionModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeFunction::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeFunction& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeFunction& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeFunction model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeTableSample field model
class FieldModel_pg_query_RangeTableSample : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeTableSample(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 192; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> relation;
    FieldModelVector<::pg_query::Node> method;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<::pg_query::Node> repeatable;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding RangeTableSample model
class RangeTableSampleModel : public FBE::Model
{
public:
    RangeTableSampleModel() : model(this->buffer(), 4) {}
    RangeTableSampleModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeTableSample::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeTableSample& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeTableSample& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeTableSample model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeTableFunc field model
class FieldModel_pg_query_RangeTableFunc : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeTableFunc(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 193; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> lateral;
    FieldModel<::pg_query::Node> docexpr;
    FieldModel<::pg_query::Node> rowexpr;
    FieldModelVector<::pg_query::Node> namespaces;
    FieldModelVector<::pg_query::Node> columns;
    FieldModelPtr_pg_query_Alias alias;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding RangeTableFunc model
class RangeTableFuncModel : public FBE::Model
{
public:
    RangeTableFuncModel() : model(this->buffer(), 4) {}
    RangeTableFuncModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeTableFunc::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeTableFunc& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeTableFunc& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeTableFunc model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeTableFuncCol field model
class FieldModel_pg_query_RangeTableFuncCol : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeTableFuncCol(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 194; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> colname;
    FieldModelPtr_pg_query_TypeName type_name;
    FieldModel<bool> for_ordinality;
    FieldModel<bool> is_not_null;
    FieldModel<::pg_query::Node> colexpr;
    FieldModel<::pg_query::Node> coldefexpr;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding RangeTableFuncCol model
class RangeTableFuncColModel : public FBE::Model
{
public:
    RangeTableFuncColModel() : model(this->buffer(), 4) {}
    RangeTableFuncColModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeTableFuncCol::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeTableFuncCol& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeTableFuncCol& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeTableFuncCol model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TypeName field model
class FieldModel_pg_query_TypeName : public BaseFieldModel
{
public:
    FieldModel_pg_query_TypeName(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 195; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> names;
    FieldModel<uint32_t> type_oid;
    FieldModel<bool> setof;
    FieldModel<bool> pct_type;
    FieldModelVector<::pg_query::Node> typmods;
    FieldModel<int32_t> typemod;
    FieldModelVector<::pg_query::Node> array_bounds;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding TypeName model
class TypeNameModel : public FBE::Model
{
public:
    TypeNameModel() : model(this->buffer(), 4) {}
    TypeNameModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TypeName::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TypeName& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TypeName& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TypeName model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ColumnDef field model
class FieldModel_pg_query_ColumnDef : public BaseFieldModel
{
public:
    FieldModel_pg_query_ColumnDef(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 196; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> colname;
    FieldModelPtr_pg_query_TypeName type_name;
    FieldModel<int32_t> inhcount;
    FieldModel<bool> is_local;
    FieldModel<bool> is_not_null;
    FieldModel<bool> is_from_type;
    FieldModel<std::pmr::string> storage;
    FieldModel<::pg_query::Node> raw_default;
    FieldModel<::pg_query::Node> cooked_default;
    FieldModel<std::pmr::string> identity;
    FieldModelPtr_pg_query_RangeVar identity_sequence;
    FieldModel<std::pmr::string> generated;
    FieldModelPtr_pg_query_CollateClause coll_clause;
    FieldModel<uint32_t> coll_oid;
    FieldModelVector<::pg_query::Node> constraints;
    FieldModelVector<::pg_query::Node> fdwoptions;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding ColumnDef model
class ColumnDefModel : public FBE::Model
{
public:
    ColumnDefModel() : model(this->buffer(), 4) {}
    ColumnDefModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ColumnDef::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ColumnDef& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ColumnDef& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ColumnDef model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::IndexElem field model
class FieldModel_pg_query_IndexElem : public BaseFieldModel
{
public:
    FieldModel_pg_query_IndexElem(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 197; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModel<::pg_query::Node> expr;
    FieldModel<std::pmr::string> indexcolname;
    FieldModelVector<::pg_query::Node> collation;
    FieldModelVector<::pg_query::Node> opclass;
    FieldModelVector<::pg_query::Node> opclassopts;
    FieldModel<::pg_query::SortByDir> ordering;
    FieldModel<::pg_query::SortByNulls> nulls_ordering;
};

namespace pg_query {

// Fast Binary Encoding IndexElem model
class IndexElemModel : public FBE::Model
{
public:
    IndexElemModel() : model(this->buffer(), 4) {}
    IndexElemModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_IndexElem::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::IndexElem& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::IndexElem& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_IndexElem model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::Constraint field model
class FieldModel_pg_query_Constraint : public BaseFieldModel
{
public:
    FieldModel_pg_query_Constraint(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 198; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::ConstrType> contype;
    FieldModel<std::pmr::string> conname;
    FieldModel<bool> deferrable;
    FieldModel<bool> initdeferred;
    FieldModel<int32_t> location;
    FieldModel<bool> is_no_inherit;
    FieldModel<::pg_query::Node> raw_expr;
    FieldModel<std::pmr::string> cooked_expr;
    FieldModel<std::pmr::string> generated_when;
    FieldModelVector<::pg_query::Node> keys;
    FieldModelVector<::pg_query::Node> including;
    FieldModelVector<::pg_query::Node> exclusions;
    FieldModelVector<::pg_query::Node> options;
    FieldModel<std::pmr::string> indexname;
    FieldModel<std::pmr::string> indexspace;
    FieldModel<bool> reset_default_tblspc;
    FieldModel<std::pmr::string> access_method;
    FieldModel<::pg_query::Node> where_clause;
    FieldModelPtr_pg_query_RangeVar pktable;
    FieldModelVector<::pg_query::Node> fk_attrs;
    FieldModelVector<::pg_query::Node> pk_attrs;
    FieldModel<std::pmr::string> fk_matchtype;
    FieldModel<std::pmr::string> fk_upd_action;
    FieldModel<std::pmr::string> fk_del_action;
    FieldModelVector<::pg_query::Node> old_conpfeqop;
    FieldModel<uint32_t> old_pktable_oid;
    FieldModel<bool> skip_validation;
    FieldModel<bool> initially_valid;
};

namespace pg_query {

// Fast Binary Encoding Constraint model
class ConstraintModel : public FBE::Model
{
public:
    ConstraintModel() : model(this->buffer(), 4) {}
    ConstraintModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_Constraint::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::Constraint& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::Constraint& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_Constraint model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::DefElem field model
class FieldModel_pg_query_DefElem : public BaseFieldModel
{
public:
    FieldModel_pg_query_DefElem(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 199; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> defnamespace;
    FieldModel<std::pmr::string> defname;
    FieldModel<::pg_query::Node> arg;
    FieldModel<::pg_query::DefElemAction> defaction;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding DefElem model
class DefElemModel : public FBE::Model
{
public:
    DefElemModel() : model(this->buffer(), 4) {}
    DefElemModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_DefElem::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::DefElem& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::DefElem& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_DefElem model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeTblEntry field model
class FieldModel_pg_query_RangeTblEntry : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeTblEntry(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 200; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::RTEKind> rtekind;
    FieldModel<uint32_t> relid;
    FieldModel<std::pmr::string> relkind;
    FieldModel<int32_t> rellockmode;
    FieldModelPtr_pg_query_TableSampleClause tablesample;
    FieldModelPtr_pg_query_Query subquery;
    FieldModel<bool> security_barrier;
    FieldModel<::pg_query::JoinType> jointype;
    FieldModel<int32_t> joinmergedcols;
    FieldModelVector<::pg_query::Node> joinaliasvars;
    FieldModelVector<::pg_query::Node> joinleftcols;
    FieldModelVector<::pg_query::Node> joinrightcols;
    FieldModelVector<::pg_query::Node> functions;
    FieldModel<bool> funcordinality;
    FieldModelPtr_pg_query_TableFunc tablefunc;
    FieldModelVector<::pg_query::Node> values_lists;
    FieldModel<std::pmr::string> ctename;
    FieldModel<uint32_t> ctelevelsup;
    FieldModel<bool> self_reference;
    FieldModelVector<::pg_query::Node> coltypes;
    FieldModelVector<::pg_query::Node> coltypmods;
    FieldModelVector<::pg_query::Node> colcollations;
    FieldModel<std::pmr::string> enrname;
    FieldModel<double> enrtuples;
    FieldModelPtr_pg_query_Alias alias;
    FieldModelPtr_pg_query_Alias eref;
    FieldModel<bool> lateral;
    FieldModel<bool> inh;
    FieldModel<bool> in_from_cl;
    FieldModel<uint32_t> required_perms;
    FieldModel<uint32_t> check_as_user;
    FieldModelVector<uint64_t> selected_cols;
    FieldModelVector<uint64_t> inserted_cols;
    FieldModelVector<uint64_t> updated_cols;
    FieldModelVector<uint64_t> extra_updated_cols;
    FieldModelVector<::pg_query::Node> security_quals;
};

namespace pg_query {

// Fast Binary Encoding RangeTblEntry model
class RangeTblEntryModel : public FBE::Model
{
public:
    RangeTblEntryModel() : model(this->buffer(), 4) {}
    RangeTblEntryModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeTblEntry::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeTblEntry& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeTblEntry& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeTblEntry model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RangeTblFunction field model
class FieldModel_pg_query_RangeTblFunction : public BaseFieldModel
{
public:
    FieldModel_pg_query_RangeTblFunction(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 201; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::Node> funcexpr;
    FieldModel<int32_t> funccolcount;
    FieldModelVector<::pg_query::Node> funccolnames;
    FieldModelVector<::pg_query::Node> funccoltypes;
    FieldModelVector<::pg_query::Node> funccoltypmods;
    FieldModelVector<::pg_query::Node> funccolcollations;
    FieldModelVector<uint64_t> funcparams;
};

namespace pg_query {

// Fast Binary Encoding RangeTblFunction model
class RangeTblFunctionModel : public FBE::Model
{
public:
    RangeTblFunctionModel() : model(this->buffer(), 4) {}
    RangeTblFunctionModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RangeTblFunction::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RangeTblFunction& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RangeTblFunction& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RangeTblFunction model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TableSampleClause field model
class FieldModel_pg_query_TableSampleClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_TableSampleClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 202; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<uint32_t> tsmhandler;
    FieldModelVector<::pg_query::Node> args;
    FieldModel<::pg_query::Node> repeatable;
};

namespace pg_query {

// Fast Binary Encoding TableSampleClause model
class TableSampleClauseModel : public FBE::Model
{
public:
    TableSampleClauseModel() : model(this->buffer(), 4) {}
    TableSampleClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TableSampleClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TableSampleClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TableSampleClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TableSampleClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::WithCheckOption field model
class FieldModel_pg_query_WithCheckOption : public BaseFieldModel
{
public:
    FieldModel_pg_query_WithCheckOption(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 203; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::WCOKind> kind;
    FieldModel<std::pmr::string> relname;
    FieldModel<std::pmr::string> polname;
    FieldModel<::pg_query::Node> qual;
    FieldModel<bool> cascaded;
};

namespace pg_query {

// Fast Binary Encoding WithCheckOption model
class WithCheckOptionModel : public FBE::Model
{
public:
    WithCheckOptionModel() : model(this->buffer(), 4) {}
    WithCheckOptionModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_WithCheckOption::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::WithCheckOption& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::WithCheckOption& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_WithCheckOption model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::SortGroupClause field model
class FieldModel_pg_query_SortGroupClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_SortGroupClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 204; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<uint32_t> tle_sort_group_ref;
    FieldModel<uint32_t> eqop;
    FieldModel<uint32_t> sortop;
    FieldModel<bool> nulls_first;
    FieldModel<bool> hashable;
};

namespace pg_query {

// Fast Binary Encoding SortGroupClause model
class SortGroupClauseModel : public FBE::Model
{
public:
    SortGroupClauseModel() : model(this->buffer(), 4) {}
    SortGroupClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_SortGroupClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::SortGroupClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::SortGroupClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_SortGroupClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::GroupingSet field model
class FieldModel_pg_query_GroupingSet : public BaseFieldModel
{
public:
    FieldModel_pg_query_GroupingSet(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 205; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::GroupingSetKind> kind;
    FieldModelVector<::pg_query::Node> content;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding GroupingSet model
class GroupingSetModel : public FBE::Model
{
public:
    GroupingSetModel() : model(this->buffer(), 4) {}
    GroupingSetModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_GroupingSet::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::GroupingSet& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::GroupingSet& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_GroupingSet model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::WindowClause field model
class FieldModel_pg_query_WindowClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_WindowClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 206; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModel<std::pmr::string> refname;
    FieldModelVector<::pg_query::Node> partition_clause;
    FieldModelVector<::pg_query::Node> order_clause;
    FieldModel<int32_t> frame_options;
    FieldModel<::pg_query::Node> start_offset;
    FieldModel<::pg_query::Node> end_offset;
    FieldModel<uint32_t> start_in_range_func;
    FieldModel<uint32_t> end_in_range_func;
    FieldModel<uint32_t> in_range_coll;
    FieldModel<bool> in_range_asc;
    FieldModel<bool> in_range_nulls_first;
    FieldModel<uint32_t> winref;
    FieldModel<bool> copied_order;
};

namespace pg_query {

// Fast Binary Encoding WindowClause model
class WindowClauseModel : public FBE::Model
{
public:
    WindowClauseModel() : model(this->buffer(), 4) {}
    WindowClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_WindowClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::WindowClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::WindowClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_WindowClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ObjectWithArgs field model
class FieldModel_pg_query_ObjectWithArgs : public BaseFieldModel
{
public:
    FieldModel_pg_query_ObjectWithArgs(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 207; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> objname;
    FieldModelVector<::pg_query::Node> objargs;
    FieldModel<bool> args_unspecified;
};

namespace pg_query {

// Fast Binary Encoding ObjectWithArgs model
class ObjectWithArgsModel : public FBE::Model
{
public:
    ObjectWithArgsModel() : model(this->buffer(), 4) {}
    ObjectWithArgsModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ObjectWithArgs::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ObjectWithArgs& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ObjectWithArgs& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ObjectWithArgs model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::AccessPriv field model
class FieldModel_pg_query_AccessPriv : public BaseFieldModel
{
public:
    FieldModel_pg_query_AccessPriv(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 208; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> priv_name;
    FieldModelVector<::pg_query::Node> cols;
};

namespace pg_query {

// Fast Binary Encoding AccessPriv model
class AccessPrivModel : public FBE::Model
{
public:
    AccessPrivModel() : model(this->buffer(), 4) {}
    AccessPrivModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_AccessPriv::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::AccessPriv& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::AccessPriv& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_AccessPriv model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CreateOpClassItem field model
class FieldModel_pg_query_CreateOpClassItem : public BaseFieldModel
{
public:
    FieldModel_pg_query_CreateOpClassItem(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 209; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<int32_t> itemtype;
    FieldModelPtr_pg_query_ObjectWithArgs name;
    FieldModel<int32_t> number;
    FieldModelVector<::pg_query::Node> order_family;
    FieldModelVector<::pg_query::Node> class_args;
    FieldModelPtr_pg_query_TypeName storedtype;
};

namespace pg_query {

// Fast Binary Encoding CreateOpClassItem model
class CreateOpClassItemModel : public FBE::Model
{
public:
    CreateOpClassItemModel() : model(this->buffer(), 4) {}
    CreateOpClassItemModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CreateOpClassItem::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CreateOpClassItem& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CreateOpClassItem& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CreateOpClassItem model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TableLikeClause field model
class FieldModel_pg_query_TableLikeClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_TableLikeClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 210; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<uint32_t> options;
    FieldModel<uint32_t> relation_oid;
};

namespace pg_query {

// Fast Binary Encoding TableLikeClause model
class TableLikeClauseModel : public FBE::Model
{
public:
    TableLikeClauseModel() : model(this->buffer(), 4) {}
    TableLikeClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TableLikeClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TableLikeClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TableLikeClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TableLikeClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::FunctionParameter field model
class FieldModel_pg_query_FunctionParameter : public BaseFieldModel
{
public:
    FieldModel_pg_query_FunctionParameter(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 211; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModelPtr_pg_query_TypeName arg_type;
    FieldModel<::pg_query::FunctionParameterMode> mode;
    FieldModel<::pg_query::Node> defexpr;
};

namespace pg_query {

// Fast Binary Encoding FunctionParameter model
class FunctionParameterModel : public FBE::Model
{
public:
    FunctionParameterModel() : model(this->buffer(), 4) {}
    FunctionParameterModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_FunctionParameter::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::FunctionParameter& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::FunctionParameter& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_FunctionParameter model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::LockingClause field model
class FieldModel_pg_query_LockingClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_LockingClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 212; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> locked_rels;
    FieldModel<::pg_query::LockClauseStrength> strength;
    FieldModel<::pg_query::LockWaitPolicy> wait_policy;
};

namespace pg_query {

// Fast Binary Encoding LockingClause model
class LockingClauseModel : public FBE::Model
{
public:
    LockingClauseModel() : model(this->buffer(), 4) {}
    LockingClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_LockingClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::LockingClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::LockingClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_LockingClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RowMarkClause field model
class FieldModel_pg_query_RowMarkClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_RowMarkClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 213; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<uint32_t> rti;
    FieldModel<::pg_query::LockClauseStrength> strength;
    FieldModel<::pg_query::LockWaitPolicy> wait_policy;
    FieldModel<bool> pushed_down;
};

namespace pg_query {

// Fast Binary Encoding RowMarkClause model
class RowMarkClauseModel : public FBE::Model
{
public:
    RowMarkClauseModel() : model(this->buffer(), 4) {}
    RowMarkClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RowMarkClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RowMarkClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RowMarkClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RowMarkClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::XmlSerialize field model
class FieldModel_pg_query_XmlSerialize : public BaseFieldModel
{
public:
    FieldModel_pg_query_XmlSerialize(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 214; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::XmlOptionType> xmloption;
    FieldModel<::pg_query::Node> expr;
    FieldModelPtr_pg_query_TypeName type_name;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding XmlSerialize model
class XmlSerializeModel : public FBE::Model
{
public:
    XmlSerializeModel() : model(this->buffer(), 4) {}
    XmlSerializeModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_XmlSerialize::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::XmlSerialize& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::XmlSerialize& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_XmlSerialize model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::WithClause field model
class FieldModel_pg_query_WithClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_WithClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 215; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> ctes;
    FieldModel<bool> recursive;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding WithClause model
class WithClauseModel : public FBE::Model
{
public:
    WithClauseModel() : model(this->buffer(), 4) {}
    WithClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_WithClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::WithClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::WithClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_WithClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::InferClause field model
class FieldModel_pg_query_InferClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_InferClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 216; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelVector<::pg_query::Node> index_elems;
    FieldModel<::pg_query::Node> where_clause;
    FieldModel<std::pmr::string> conname;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding InferClause model
class InferClauseModel : public FBE::Model
{
public:
    InferClauseModel() : model(this->buffer(), 4) {}
    InferClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_InferClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::InferClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::InferClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_InferClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::OnConflictClause field model
class FieldModel_pg_query_OnConflictClause : public BaseFieldModel
{
public:
    FieldModel_pg_query_OnConflictClause(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 217; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::OnConflictAction> action;
    FieldModelPtr_pg_query_InferClause infer;
    FieldModelVector<::pg_query::Node> target_list;
    FieldModel<::pg_query::Node> where_clause;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding OnConflictClause model
class OnConflictClauseModel : public FBE::Model
{
public:
    OnConflictClauseModel() : model(this->buffer(), 4) {}
    OnConflictClauseModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_OnConflictClause::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::OnConflictClause& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::OnConflictClause& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_OnConflictClause model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CommonTableExpr field model
class FieldModel_pg_query_CommonTableExpr : public BaseFieldModel
{
public:
    FieldModel_pg_query_CommonTableExpr(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 218; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> ctename;
    FieldModelVector<::pg_query::Node> aliascolnames;
    FieldModel<::pg_query::CTEMaterialize> ctematerialized;
    FieldModel<::pg_query::Node> ctequery;
    FieldModel<int32_t> location;
    FieldModel<bool> cterecursive;
    FieldModel<int32_t> cterefcount;
    FieldModelVector<::pg_query::Node> ctecolnames;
    FieldModelVector<::pg_query::Node> ctecoltypes;
    FieldModelVector<::pg_query::Node> ctecoltypmods;
    FieldModelVector<::pg_query::Node> ctecolcollations;
};

namespace pg_query {

// Fast Binary Encoding CommonTableExpr model
class CommonTableExprModel : public FBE::Model
{
public:
    CommonTableExprModel() : model(this->buffer(), 4) {}
    CommonTableExprModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CommonTableExpr::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CommonTableExpr& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CommonTableExpr& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CommonTableExpr model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::RoleSpec field model
class FieldModel_pg_query_RoleSpec : public BaseFieldModel
{
public:
    FieldModel_pg_query_RoleSpec(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 219; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::RoleSpecType> roletype;
    FieldModel<std::pmr::string> rolename;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding RoleSpec model
class RoleSpecModel : public FBE::Model
{
public:
    RoleSpecModel() : model(this->buffer(), 4) {}
    RoleSpecModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_RoleSpec::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::RoleSpec& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::RoleSpec& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_RoleSpec model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::TriggerTransition field model
class FieldModel_pg_query_TriggerTransition : public BaseFieldModel
{
public:
    FieldModel_pg_query_TriggerTransition(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 220; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModel<bool> is_new;
    FieldModel<bool> is_table;
};

namespace pg_query {

// Fast Binary Encoding TriggerTransition model
class TriggerTransitionModel : public FBE::Model
{
public:
    TriggerTransitionModel() : model(this->buffer(), 4) {}
    TriggerTransitionModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_TriggerTransition::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::TriggerTransition& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::TriggerTransition& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_TriggerTransition model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::PartitionElem field model
class FieldModel_pg_query_PartitionElem : public BaseFieldModel
{
public:
    FieldModel_pg_query_PartitionElem(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 221; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> name;
    FieldModel<::pg_query::Node> expr;
    FieldModelVector<::pg_query::Node> collation;
    FieldModelVector<::pg_query::Node> opclass;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding PartitionElem model
class PartitionElemModel : public FBE::Model
{
public:
    PartitionElemModel() : model(this->buffer(), 4) {}
    PartitionElemModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_PartitionElem::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::PartitionElem& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::PartitionElem& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_PartitionElem model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::PartitionSpec field model
class FieldModel_pg_query_PartitionSpec : public BaseFieldModel
{
public:
    FieldModel_pg_query_PartitionSpec(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 222; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> strategy;
    FieldModelVector<::pg_query::Node> part_params;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding PartitionSpec model
class PartitionSpecModel : public FBE::Model
{
public:
    PartitionSpecModel() : model(this->buffer(), 4) {}
    PartitionSpecModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_PartitionSpec::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::PartitionSpec& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::PartitionSpec& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_PartitionSpec model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::PartitionBoundSpec field model
class FieldModel_pg_query_PartitionBoundSpec : public BaseFieldModel
{
public:
    FieldModel_pg_query_PartitionBoundSpec(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 223; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> strategy;
    FieldModel<bool> is_default;
    FieldModel<int32_t> modulus;
    FieldModel<int32_t> remainder;
    FieldModelVector<::pg_query::Node> listdatums;
    FieldModelVector<::pg_query::Node> lowerdatums;
    FieldModelVector<::pg_query::Node> upperdatums;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding PartitionBoundSpec model
class PartitionBoundSpecModel : public FBE::Model
{
public:
    PartitionBoundSpecModel() : model(this->buffer(), 4) {}
    PartitionBoundSpecModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_PartitionBoundSpec::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::PartitionBoundSpec& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::PartitionBoundSpec& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_PartitionBoundSpec model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::PartitionRangeDatum field model
class FieldModel_pg_query_PartitionRangeDatum : public BaseFieldModel
{
public:
    FieldModel_pg_query_PartitionRangeDatum(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 224; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::pg_query::PartitionRangeDatumKind> kind;
    FieldModel<::pg_query::Node> value;
    FieldModel<int32_t> location;
};

namespace pg_query {

// Fast Binary Encoding PartitionRangeDatum model
class PartitionRangeDatumModel : public FBE::Model
{
public:
    PartitionRangeDatumModel() : model(this->buffer(), 4) {}
    PartitionRangeDatumModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_PartitionRangeDatum::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::PartitionRangeDatum& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::PartitionRangeDatum& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_PartitionRangeDatum model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::PartitionCmd field model
class FieldModel_pg_query_PartitionCmd : public BaseFieldModel
{
public:
    FieldModel_pg_query_PartitionCmd(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 225; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar name;
    FieldModelPtr_pg_query_PartitionBoundSpec bound;
};

namespace pg_query {

// Fast Binary Encoding PartitionCmd model
class PartitionCmdModel : public FBE::Model
{
public:
    PartitionCmdModel() : model(this->buffer(), 4) {}
    PartitionCmdModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_PartitionCmd::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::PartitionCmd& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::PartitionCmd& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_PartitionCmd model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::VacuumRelation field model
class FieldModel_pg_query_VacuumRelation : public BaseFieldModel
{
public:
    FieldModel_pg_query_VacuumRelation(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 226; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModelPtr_pg_query_RangeVar relation;
    FieldModel<uint32_t> oid;
    FieldModelVector<::pg_query::Node> va_cols;
};

namespace pg_query {

// Fast Binary Encoding VacuumRelation model
class VacuumRelationModel : public FBE::Model
{
public:
    VacuumRelationModel() : model(this->buffer(), 4) {}
    VacuumRelationModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_VacuumRelation::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::VacuumRelation& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::VacuumRelation& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_VacuumRelation model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::InlineCodeBlock field model
class FieldModel_pg_query_InlineCodeBlock : public BaseFieldModel
{
public:
    FieldModel_pg_query_InlineCodeBlock(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 227; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<std::pmr::string> source_text;
    FieldModel<uint32_t> lang_oid;
    FieldModel<bool> lang_is_trusted;
    FieldModel<bool> atomic;
};

namespace pg_query {

// Fast Binary Encoding InlineCodeBlock model
class InlineCodeBlockModel : public FBE::Model
{
public:
    InlineCodeBlockModel() : model(this->buffer(), 4) {}
    InlineCodeBlockModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_InlineCodeBlock::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::InlineCodeBlock& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::InlineCodeBlock& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_InlineCodeBlock model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::CallContext field model
class FieldModel_pg_query_CallContext : public BaseFieldModel
{
public:
    FieldModel_pg_query_CallContext(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 228; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<bool> atomic;
};

namespace pg_query {

// Fast Binary Encoding CallContext model
class CallContextModel : public FBE::Model
{
public:
    CallContextModel() : model(this->buffer(), 4) {}
    CallContextModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_CallContext::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::CallContext& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::CallContext& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_CallContext model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ScanToken field model
class FieldModel_pg_query_ScanToken : public BaseFieldModel
{
public:
    FieldModel_pg_query_ScanToken(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 229; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<int32_t> start;
    FieldModel<int32_t> end;
    FieldModel<::pg_query::Token> token;
    FieldModel<::pg_query::KeywordKind> keyword_kind;
};

namespace pg_query {

// Fast Binary Encoding ScanToken model
class ScanTokenModel : public FBE::Model
{
public:
    ScanTokenModel() : model(this->buffer(), 4) {}
    ScanTokenModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ScanToken::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ScanToken& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ScanToken& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ScanToken model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ParseResult field model
class FieldModel_pg_query_ParseResult : public BaseFieldModel
{
public:
    FieldModel_pg_query_ParseResult(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 230; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<int32_t> version;
    FieldModelCustomVector<FieldModel_pg_query_RawStmt, ::pg_query::RawStmt> stmts;
};

namespace pg_query {

// Fast Binary Encoding ParseResult model
class ParseResultModel : public FBE::Model
{
public:
    ParseResultModel() : model(this->buffer(), 4) {}
    ParseResultModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ParseResult::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ParseResult& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ParseResult& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ParseResult model;
};

} // namespace pg_query

// Fast Binary Encoding ::pg_query::ScanResult field model
class FieldModel_pg_query_ScanResult : public BaseFieldModel
{
public:
    FieldModel_pg_query_ScanResult(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept override { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept override { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept override;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 231; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept override { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept override { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept override;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept override;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept override;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept override;

    // Get the struct value
    void get(::FBE::Base& fbe_value) noexcept override;
    // Get the struct fields values
    void get_fields(::FBE::Base& fbe_value, size_t fbe_struct_size) noexcept override;

    // Set the struct value (begin phase)
    size_t set_begin() override;
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin) override;

    // Set the struct value
    void set(const ::FBE::Base& fbe_value) noexcept override;
    // Set the struct fields values
    void set_fields(const ::FBE::Base& fbe_value) noexcept override;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<int32_t> version;
    FieldModelCustomVector<FieldModel_pg_query_ScanToken, ::pg_query::ScanToken> tokens;
};

namespace pg_query {

// Fast Binary Encoding ScanResult model
class ScanResultModel : public FBE::Model
{
public:
    ScanResultModel() : model(this->buffer(), 4) {}
    ScanResultModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel_pg_query_ScanResult::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::pg_query::ScanResult& value);
    // Deserialize the struct value
    size_t deserialize(::pg_query::ScanResult& value) noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel_pg_query_ScanResult model;
};

} // namespace pg_query

} // namespace FBE
